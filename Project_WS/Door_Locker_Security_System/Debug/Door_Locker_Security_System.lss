
Door_Locker_Security_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000092  00800060  00002a48  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000f2  008000f2  00002b6e  2**0
                  ALLOC
  3 .stab         000027c0  00000000  00000000  00002b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001172  00000000  00000000  00005330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000065e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000839b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009286  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a034  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a194  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a421  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 83 12 	jmp	0x2506	; 0x2506 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 b6 12 	jmp	0x256c	; 0x256c <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3f       	cpi	r26, 0xF2	; 242
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ef       	ldi	r26, 0xF2	; 242
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 09 	call	0x12a2	; 0x12a2 <main>
      8a:	0c 94 22 15 	jmp	0x2a44	; 0x2a44 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ce 14 	jmp	0x299c	; 0x299c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <APP_counting>:
/*
 * Description :
 * the function which will be called back by the timer0
*/
void APP_counting(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_incrementer++;
     b4e:	80 91 f2 00 	lds	r24, 0x00F2
     b52:	90 91 f3 00 	lds	r25, 0x00F3
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 f3 00 	sts	0x00F3, r25
     b5c:	80 93 f2 00 	sts	0x00F2, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <APP_generatePassword>:
 * 1. Take password twice from Keypad.
 * 2. Send them by the UART.
 * 3. Get the results and for matched send by UART to save it for unmatched repeat itself.
 */
void APP_generatePassword(void)
{
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	6e 97       	sbiw	r28, 0x1e	; 30
     b74:	0f b6       	in	r0, 0x3f	; 63
     b76:	f8 94       	cli
     b78:	de bf       	out	0x3e, r29	; 62
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	cd bf       	out	0x3d, r28	; 61
	uint8 a_counter;
	uint8 a_check;
	LCD_clearScreen();
     b7e:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass");
     b82:	20 e6       	ldi	r18, 0x60	; 96
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	60 e0       	ldi	r22, 0x00	; 0
     b8a:	a9 01       	movw	r20, r18
     b8c:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     b90:	1e 8e       	std	Y+30, r1	; 0x1e
     b92:	85 c0       	rjmp	.+266    	; 0xc9e <APP_generatePassword+0x138>
	{
		g_password0[a_counter] = KEYPAD_getPressedKey();
     b94:	8e 8d       	ldd	r24, Y+30	; 0x1e
     b96:	08 2f       	mov	r16, r24
     b98:	10 e0       	ldi	r17, 0x00	; 0
     b9a:	0e 94 cf 0c 	call	0x199e	; 0x199e <KEYPAD_getPressedKey>
     b9e:	f8 01       	movw	r30, r16
     ba0:	e5 50       	subi	r30, 0x05	; 5
     ba2:	ff 4f       	sbci	r31, 0xFF	; 255
     ba4:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(1,a_counter,"*");
     ba6:	2f e6       	ldi	r18, 0x6F	; 111
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	6e 8d       	ldd	r22, Y+30	; 0x1e
     bae:	a9 01       	movw	r20, r18
     bb0:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a8 ec       	ldi	r26, 0xC8	; 200
     bba:	b3 e4       	ldi	r27, 0x43	; 67
     bbc:	89 8f       	std	Y+25, r24	; 0x19
     bbe:	9a 8f       	std	Y+26, r25	; 0x1a
     bc0:	ab 8f       	std	Y+27, r26	; 0x1b
     bc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc4:	69 8d       	ldd	r22, Y+25	; 0x19
     bc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     bca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bcc:	20 e0       	ldi	r18, 0x00	; 0
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	4a ef       	ldi	r20, 0xFA	; 250
     bd2:	54 e4       	ldi	r21, 0x44	; 68
     bd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bd8:	dc 01       	movw	r26, r24
     bda:	cb 01       	movw	r24, r22
     bdc:	8d 8b       	std	Y+21, r24	; 0x15
     bde:	9e 8b       	std	Y+22, r25	; 0x16
     be0:	af 8b       	std	Y+23, r26	; 0x17
     be2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     be4:	6d 89       	ldd	r22, Y+21	; 0x15
     be6:	7e 89       	ldd	r23, Y+22	; 0x16
     be8:	8f 89       	ldd	r24, Y+23	; 0x17
     bea:	98 8d       	ldd	r25, Y+24	; 0x18
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	40 e8       	ldi	r20, 0x80	; 128
     bf2:	5f e3       	ldi	r21, 0x3F	; 63
     bf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bf8:	88 23       	and	r24, r24
     bfa:	2c f4       	brge	.+10     	; 0xc06 <APP_generatePassword+0xa0>
		__ticks = 1;
     bfc:	81 e0       	ldi	r24, 0x01	; 1
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	9c 8b       	std	Y+20, r25	; 0x14
     c02:	8b 8b       	std	Y+19, r24	; 0x13
     c04:	3f c0       	rjmp	.+126    	; 0xc84 <APP_generatePassword+0x11e>
	else if (__tmp > 65535)
     c06:	6d 89       	ldd	r22, Y+21	; 0x15
     c08:	7e 89       	ldd	r23, Y+22	; 0x16
     c0a:	8f 89       	ldd	r24, Y+23	; 0x17
     c0c:	98 8d       	ldd	r25, Y+24	; 0x18
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	3f ef       	ldi	r19, 0xFF	; 255
     c12:	4f e7       	ldi	r20, 0x7F	; 127
     c14:	57 e4       	ldi	r21, 0x47	; 71
     c16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1a:	18 16       	cp	r1, r24
     c1c:	4c f5       	brge	.+82     	; 0xc70 <APP_generatePassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c1e:	69 8d       	ldd	r22, Y+25	; 0x19
     c20:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c22:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c24:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	40 e2       	ldi	r20, 0x20	; 32
     c2c:	51 e4       	ldi	r21, 0x41	; 65
     c2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c32:	dc 01       	movw	r26, r24
     c34:	cb 01       	movw	r24, r22
     c36:	bc 01       	movw	r22, r24
     c38:	cd 01       	movw	r24, r26
     c3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9c 8b       	std	Y+20, r25	; 0x14
     c44:	8b 8b       	std	Y+19, r24	; 0x13
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <APP_generatePassword+0x100>
     c48:	88 ec       	ldi	r24, 0xC8	; 200
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	9a 8b       	std	Y+18, r25	; 0x12
     c4e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c50:	89 89       	ldd	r24, Y+17	; 0x11
     c52:	9a 89       	ldd	r25, Y+18	; 0x12
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	f1 f7       	brne	.-4      	; 0xc54 <APP_generatePassword+0xee>
     c58:	9a 8b       	std	Y+18, r25	; 0x12
     c5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5c:	8b 89       	ldd	r24, Y+19	; 0x13
     c5e:	9c 89       	ldd	r25, Y+20	; 0x14
     c60:	01 97       	sbiw	r24, 0x01	; 1
     c62:	9c 8b       	std	Y+20, r25	; 0x14
     c64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c66:	8b 89       	ldd	r24, Y+19	; 0x13
     c68:	9c 89       	ldd	r25, Y+20	; 0x14
     c6a:	00 97       	sbiw	r24, 0x00	; 0
     c6c:	69 f7       	brne	.-38     	; 0xc48 <APP_generatePassword+0xe2>
     c6e:	14 c0       	rjmp	.+40     	; 0xc98 <APP_generatePassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c70:	6d 89       	ldd	r22, Y+21	; 0x15
     c72:	7e 89       	ldd	r23, Y+22	; 0x16
     c74:	8f 89       	ldd	r24, Y+23	; 0x17
     c76:	98 8d       	ldd	r25, Y+24	; 0x18
     c78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	9c 8b       	std	Y+20, r25	; 0x14
     c82:	8b 8b       	std	Y+19, r24	; 0x13
     c84:	8b 89       	ldd	r24, Y+19	; 0x13
     c86:	9c 89       	ldd	r25, Y+20	; 0x14
     c88:	98 8b       	std	Y+16, r25	; 0x10
     c8a:	8f 87       	std	Y+15, r24	; 0x0f
     c8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c8e:	98 89       	ldd	r25, Y+16	; 0x10
     c90:	01 97       	sbiw	r24, 0x01	; 1
     c92:	f1 f7       	brne	.-4      	; 0xc90 <APP_generatePassword+0x12a>
     c94:	98 8b       	std	Y+16, r25	; 0x10
     c96:	8f 87       	std	Y+15, r24	; 0x0f
{
	uint8 a_counter;
	uint8 a_check;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"PLZ Enter Pass");
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     c98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     c9a:	8f 5f       	subi	r24, 0xFF	; 255
     c9c:	8e 8f       	std	Y+30, r24	; 0x1e
     c9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	08 f4       	brcc	.+2      	; 0xca6 <APP_generatePassword+0x140>
     ca4:	77 cf       	rjmp	.-274    	; 0xb94 <APP_generatePassword+0x2e>
	{
		g_password0[a_counter] = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}
	LCD_clearScreen();
     ca6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"PLZ ReEnter Pass");
     caa:	21 e7       	ldi	r18, 0x71	; 113
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	80 e0       	ldi	r24, 0x00	; 0
     cb0:	60 e0       	ldi	r22, 0x00	; 0
     cb2:	a9 01       	movw	r20, r18
     cb4:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     cb8:	1e 8e       	std	Y+30, r1	; 0x1e
     cba:	85 c0       	rjmp	.+266    	; 0xdc6 <APP_generatePassword+0x260>
	{
		g_password1[a_counter] = KEYPAD_getPressedKey();
     cbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     cbe:	08 2f       	mov	r16, r24
     cc0:	10 e0       	ldi	r17, 0x00	; 0
     cc2:	0e 94 cf 0c 	call	0x199e	; 0x199e <KEYPAD_getPressedKey>
     cc6:	f8 01       	movw	r30, r16
     cc8:	ea 50       	subi	r30, 0x0A	; 10
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(1,a_counter,"*");
     cce:	2f e6       	ldi	r18, 0x6F	; 111
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	6e 8d       	ldd	r22, Y+30	; 0x1e
     cd6:	a9 01       	movw	r20, r18
     cd8:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	a8 ec       	ldi	r26, 0xC8	; 200
     ce2:	b3 e4       	ldi	r27, 0x43	; 67
     ce4:	8b 87       	std	Y+11, r24	; 0x0b
     ce6:	9c 87       	std	Y+12, r25	; 0x0c
     ce8:	ad 87       	std	Y+13, r26	; 0x0d
     cea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cec:	6b 85       	ldd	r22, Y+11	; 0x0b
     cee:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf4:	20 e0       	ldi	r18, 0x00	; 0
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	4a ef       	ldi	r20, 0xFA	; 250
     cfa:	54 e4       	ldi	r21, 0x44	; 68
     cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	8f 83       	std	Y+7, r24	; 0x07
     d06:	98 87       	std	Y+8, r25	; 0x08
     d08:	a9 87       	std	Y+9, r26	; 0x09
     d0a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d0c:	6f 81       	ldd	r22, Y+7	; 0x07
     d0e:	78 85       	ldd	r23, Y+8	; 0x08
     d10:	89 85       	ldd	r24, Y+9	; 0x09
     d12:	9a 85       	ldd	r25, Y+10	; 0x0a
     d14:	20 e0       	ldi	r18, 0x00	; 0
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	40 e8       	ldi	r20, 0x80	; 128
     d1a:	5f e3       	ldi	r21, 0x3F	; 63
     d1c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d20:	88 23       	and	r24, r24
     d22:	2c f4       	brge	.+10     	; 0xd2e <APP_generatePassword+0x1c8>
		__ticks = 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	9e 83       	std	Y+6, r25	; 0x06
     d2a:	8d 83       	std	Y+5, r24	; 0x05
     d2c:	3f c0       	rjmp	.+126    	; 0xdac <APP_generatePassword+0x246>
	else if (__tmp > 65535)
     d2e:	6f 81       	ldd	r22, Y+7	; 0x07
     d30:	78 85       	ldd	r23, Y+8	; 0x08
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	9a 85       	ldd	r25, Y+10	; 0x0a
     d36:	20 e0       	ldi	r18, 0x00	; 0
     d38:	3f ef       	ldi	r19, 0xFF	; 255
     d3a:	4f e7       	ldi	r20, 0x7F	; 127
     d3c:	57 e4       	ldi	r21, 0x47	; 71
     d3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d42:	18 16       	cp	r1, r24
     d44:	4c f5       	brge	.+82     	; 0xd98 <APP_generatePassword+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d46:	6b 85       	ldd	r22, Y+11	; 0x0b
     d48:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d4c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e2       	ldi	r20, 0x20	; 32
     d54:	51 e4       	ldi	r21, 0x41	; 65
     d56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5a:	dc 01       	movw	r26, r24
     d5c:	cb 01       	movw	r24, r22
     d5e:	bc 01       	movw	r22, r24
     d60:	cd 01       	movw	r24, r26
     d62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9e 83       	std	Y+6, r25	; 0x06
     d6c:	8d 83       	std	Y+5, r24	; 0x05
     d6e:	0f c0       	rjmp	.+30     	; 0xd8e <APP_generatePassword+0x228>
     d70:	88 ec       	ldi	r24, 0xC8	; 200
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9c 83       	std	Y+4, r25	; 0x04
     d76:	8b 83       	std	Y+3, r24	; 0x03
     d78:	8b 81       	ldd	r24, Y+3	; 0x03
     d7a:	9c 81       	ldd	r25, Y+4	; 0x04
     d7c:	01 97       	sbiw	r24, 0x01	; 1
     d7e:	f1 f7       	brne	.-4      	; 0xd7c <APP_generatePassword+0x216>
     d80:	9c 83       	std	Y+4, r25	; 0x04
     d82:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	01 97       	sbiw	r24, 0x01	; 1
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	69 f7       	brne	.-38     	; 0xd70 <APP_generatePassword+0x20a>
     d96:	14 c0       	rjmp	.+40     	; 0xdc0 <APP_generatePassword+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d98:	6f 81       	ldd	r22, Y+7	; 0x07
     d9a:	78 85       	ldd	r23, Y+8	; 0x08
     d9c:	89 85       	ldd	r24, Y+9	; 0x09
     d9e:	9a 85       	ldd	r25, Y+10	; 0x0a
     da0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da4:	dc 01       	movw	r26, r24
     da6:	cb 01       	movw	r24, r22
     da8:	9e 83       	std	Y+6, r25	; 0x06
     daa:	8d 83       	std	Y+5, r24	; 0x05
     dac:	8d 81       	ldd	r24, Y+5	; 0x05
     dae:	9e 81       	ldd	r25, Y+6	; 0x06
     db0:	9a 83       	std	Y+2, r25	; 0x02
     db2:	89 83       	std	Y+1, r24	; 0x01
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	9a 81       	ldd	r25, Y+2	; 0x02
     db8:	01 97       	sbiw	r24, 0x01	; 1
     dba:	f1 f7       	brne	.-4      	; 0xdb8 <APP_generatePassword+0x252>
     dbc:	9a 83       	std	Y+2, r25	; 0x02
     dbe:	89 83       	std	Y+1, r24	; 0x01
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"PLZ ReEnter Pass");
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     dc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc2:	8f 5f       	subi	r24, 0xFF	; 255
     dc4:	8e 8f       	std	Y+30, r24	; 0x1e
     dc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dc8:	85 30       	cpi	r24, 0x05	; 5
     dca:	08 f4       	brcc	.+2      	; 0xdce <APP_generatePassword+0x268>
     dcc:	77 cf       	rjmp	.-274    	; 0xcbc <APP_generatePassword+0x156>
		g_password1[a_counter] = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}

	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     dce:	1e 8e       	std	Y+30, r1	; 0x1e
     dd0:	0c c0       	rjmp	.+24     	; 0xdea <APP_generatePassword+0x284>
	{
		UART_sendByte(g_password0[a_counter]);
     dd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dd4:	88 2f       	mov	r24, r24
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	fc 01       	movw	r30, r24
     dda:	e5 50       	subi	r30, 0x05	; 5
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	80 81       	ld	r24, Z
     de0:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
		g_password1[a_counter] = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}

	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     de4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     de6:	8f 5f       	subi	r24, 0xFF	; 255
     de8:	8e 8f       	std	Y+30, r24	; 0x1e
     dea:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dec:	85 30       	cpi	r24, 0x05	; 5
     dee:	88 f3       	brcs	.-30     	; 0xdd2 <APP_generatePassword+0x26c>
	{
		UART_sendByte(g_password0[a_counter]);
	}
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     df0:	1e 8e       	std	Y+30, r1	; 0x1e
     df2:	0c c0       	rjmp	.+24     	; 0xe0c <APP_generatePassword+0x2a6>
	{
		UART_sendByte(g_password1[a_counter]);
     df4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     df6:	88 2f       	mov	r24, r24
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	fc 01       	movw	r30, r24
     dfc:	ea 50       	subi	r30, 0x0A	; 10
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	80 81       	ld	r24, Z
     e02:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>

	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
	{
		UART_sendByte(g_password0[a_counter]);
	}
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     e06:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e08:	8f 5f       	subi	r24, 0xFF	; 255
     e0a:	8e 8f       	std	Y+30, r24	; 0x1e
     e0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	88 f3       	brcs	.-30     	; 0xdf4 <APP_generatePassword+0x28e>
	{
		UART_sendByte(g_password1[a_counter]);
	}

	a_check = UART_recieveByte();
     e12:	0e 94 09 14 	call	0x2812	; 0x2812 <UART_recieveByte>
     e16:	8d 8f       	std	Y+29, r24	; 0x1d
	if (a_check == MATCHED)
     e18:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e1a:	88 23       	and	r24, r24
     e1c:	29 f0       	breq	.+10     	; 0xe28 <APP_generatePassword+0x2c2>
	{
		return;
	}
	else if (a_check == UNMATCHED)
     e1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e20:	81 30       	cpi	r24, 0x01	; 1
     e22:	11 f4       	brne	.+4      	; 0xe28 <APP_generatePassword+0x2c2>
	{
		APP_generatePassword();
     e24:	0e 94 b3 05 	call	0xb66	; 0xb66 <APP_generatePassword>
	}
}
     e28:	6e 96       	adiw	r28, 0x1e	; 30
     e2a:	0f b6       	in	r0, 0x3f	; 63
     e2c:	f8 94       	cli
     e2e:	de bf       	out	0x3e, r29	; 62
     e30:	0f be       	out	0x3f, r0	; 63
     e32:	cd bf       	out	0x3d, r28	; 61
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	1f 91       	pop	r17
     e3a:	0f 91       	pop	r16
     e3c:	08 95       	ret

00000e3e <APP_checkPassword>:
 * 1. Take password from Keypad.
 * 2. Send them by the UART.
 * 3. Get the results and for matched return with 0 for unmatched repeat itself three times before return 2.
 */
uint8 APP_checkPassword(void)
{
     e3e:	0f 93       	push	r16
     e40:	1f 93       	push	r17
     e42:	df 93       	push	r29
     e44:	cf 93       	push	r28
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	63 97       	sbiw	r28, 0x13	; 19
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	f8 94       	cli
     e50:	de bf       	out	0x3e, r29	; 62
     e52:	0f be       	out	0x3f, r0	; 63
     e54:	cd bf       	out	0x3d, r28	; 61
	uint8 a_counter;
	uint8 a_check ;
	uint8 a_returnCase;
	LCD_clearScreen();
     e56:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter Pass");
     e5a:	22 e8       	ldi	r18, 0x82	; 130
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	a9 01       	movw	r20, r18
     e64:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     e68:	19 8a       	std	Y+17, r1	; 0x11
     e6a:	85 c0       	rjmp	.+266    	; 0xf76 <APP_checkPassword+0x138>
	{
		g_password0[a_counter] = KEYPAD_getPressedKey();
     e6c:	89 89       	ldd	r24, Y+17	; 0x11
     e6e:	08 2f       	mov	r16, r24
     e70:	10 e0       	ldi	r17, 0x00	; 0
     e72:	0e 94 cf 0c 	call	0x199e	; 0x199e <KEYPAD_getPressedKey>
     e76:	f8 01       	movw	r30, r16
     e78:	e5 50       	subi	r30, 0x05	; 5
     e7a:	ff 4f       	sbci	r31, 0xFF	; 255
     e7c:	80 83       	st	Z, r24
		LCD_displayStringRowColumn(1,a_counter,"*");
     e7e:	2f e6       	ldi	r18, 0x6F	; 111
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	69 89       	ldd	r22, Y+17	; 0x11
     e86:	a9 01       	movw	r20, r18
     e88:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a8 ec       	ldi	r26, 0xC8	; 200
     e92:	b3 e4       	ldi	r27, 0x43	; 67
     e94:	8b 87       	std	Y+11, r24	; 0x0b
     e96:	9c 87       	std	Y+12, r25	; 0x0c
     e98:	ad 87       	std	Y+13, r26	; 0x0d
     e9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9e:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea0:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea2:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a ef       	ldi	r20, 0xFA	; 250
     eaa:	54 e4       	ldi	r21, 0x44	; 68
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	8f 83       	std	Y+7, r24	; 0x07
     eb6:	98 87       	std	Y+8, r25	; 0x08
     eb8:	a9 87       	std	Y+9, r26	; 0x09
     eba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ebc:	6f 81       	ldd	r22, Y+7	; 0x07
     ebe:	78 85       	ldd	r23, Y+8	; 0x08
     ec0:	89 85       	ldd	r24, Y+9	; 0x09
     ec2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <APP_checkPassword+0xa0>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9e 83       	std	Y+6, r25	; 0x06
     eda:	8d 83       	std	Y+5, r24	; 0x05
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <APP_checkPassword+0x11e>
	else if (__tmp > 65535)
     ede:	6f 81       	ldd	r22, Y+7	; 0x07
     ee0:	78 85       	ldd	r23, Y+8	; 0x08
     ee2:	89 85       	ldd	r24, Y+9	; 0x09
     ee4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <APP_checkPassword+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ef8:	7c 85       	ldd	r23, Y+12	; 0x0c
     efa:	8d 85       	ldd	r24, Y+13	; 0x0d
     efc:	9e 85       	ldd	r25, Y+14	; 0x0e
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <APP_checkPassword+0x100>
     f20:	88 ec       	ldi	r24, 0xC8	; 200
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <APP_checkPassword+0xee>
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8d 81       	ldd	r24, Y+5	; 0x05
     f36:	9e 81       	ldd	r25, Y+6	; 0x06
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	9e 83       	std	Y+6, r25	; 0x06
     f3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8d 81       	ldd	r24, Y+5	; 0x05
     f40:	9e 81       	ldd	r25, Y+6	; 0x06
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <APP_checkPassword+0xe2>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <APP_checkPassword+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	9e 83       	std	Y+6, r25	; 0x06
     f5a:	8d 83       	std	Y+5, r24	; 0x05
     f5c:	8d 81       	ldd	r24, Y+5	; 0x05
     f5e:	9e 81       	ldd	r25, Y+6	; 0x06
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <APP_checkPassword+0x12a>
     f6c:	9a 83       	std	Y+2, r25	; 0x02
     f6e:	89 83       	std	Y+1, r24	; 0x01
	uint8 a_counter;
	uint8 a_check ;
	uint8 a_returnCase;
	LCD_clearScreen();
	LCD_displayStringRowColumn(0,0,"Enter Pass");
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     f70:	89 89       	ldd	r24, Y+17	; 0x11
     f72:	8f 5f       	subi	r24, 0xFF	; 255
     f74:	89 8b       	std	Y+17, r24	; 0x11
     f76:	89 89       	ldd	r24, Y+17	; 0x11
     f78:	85 30       	cpi	r24, 0x05	; 5
     f7a:	08 f4       	brcc	.+2      	; 0xf7e <APP_checkPassword+0x140>
     f7c:	77 cf       	rjmp	.-274    	; 0xe6c <APP_checkPassword+0x2e>
	{
		g_password0[a_counter] = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     f7e:	19 8a       	std	Y+17, r1	; 0x11
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <APP_checkPassword+0x15c>
	{
		UART_sendByte(g_password0[a_counter]);
     f82:	89 89       	ldd	r24, Y+17	; 0x11
     f84:	88 2f       	mov	r24, r24
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	fc 01       	movw	r30, r24
     f8a:	e5 50       	subi	r30, 0x05	; 5
     f8c:	ff 4f       	sbci	r31, 0xFF	; 255
     f8e:	80 81       	ld	r24, Z
     f90:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
	{
		g_password0[a_counter] = KEYPAD_getPressedKey();
		LCD_displayStringRowColumn(1,a_counter,"*");
		_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	}
	for (a_counter=0; a_counter < PASSWORD_LENGTH; a_counter++)
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	89 8b       	std	Y+17, r24	; 0x11
     f9a:	89 89       	ldd	r24, Y+17	; 0x11
     f9c:	85 30       	cpi	r24, 0x05	; 5
     f9e:	88 f3       	brcs	.-30     	; 0xf82 <APP_checkPassword+0x144>
	{
		UART_sendByte(g_password0[a_counter]);
	}
	a_check = UART_recieveByte();
     fa0:	0e 94 09 14 	call	0x2812	; 0x2812 <UART_recieveByte>
     fa4:	88 8b       	std	Y+16, r24	; 0x10
	if (a_check == MATCHED)
     fa6:	88 89       	ldd	r24, Y+16	; 0x10
     fa8:	88 23       	and	r24, r24
     faa:	11 f4       	brne	.+4      	; 0xfb0 <APP_checkPassword+0x172>
	{
		return MATCHED;
     fac:	1a 8a       	std	Y+18, r1	; 0x12
     fae:	10 c0       	rjmp	.+32     	; 0xfd0 <APP_checkPassword+0x192>
	}
	else if (a_check == UNMATCHED)
     fb0:	88 89       	ldd	r24, Y+16	; 0x10
     fb2:	81 30       	cpi	r24, 0x01	; 1
     fb4:	31 f4       	brne	.+12     	; 0xfc2 <APP_checkPassword+0x184>
	{
		a_returnCase = APP_checkPassword();
     fb6:	0e 94 1f 07 	call	0xe3e	; 0xe3e <APP_checkPassword>
     fba:	8f 87       	std	Y+15, r24	; 0x0f
		return a_returnCase;
     fbc:	8f 85       	ldd	r24, Y+15	; 0x0f
     fbe:	8a 8b       	std	Y+18, r24	; 0x12
     fc0:	07 c0       	rjmp	.+14     	; 0xfd0 <APP_checkPassword+0x192>
	}
	else if (a_check == MISMATCHES_LIMIT)
     fc2:	88 89       	ldd	r24, Y+16	; 0x10
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	19 f4       	brne	.+6      	; 0xfce <APP_checkPassword+0x190>
	{
		return MISMATCHES_LIMIT;
     fc8:	82 e0       	ldi	r24, 0x02	; 2
     fca:	8a 8b       	std	Y+18, r24	; 0x12
     fcc:	01 c0       	rjmp	.+2      	; 0xfd0 <APP_checkPassword+0x192>
     fce:	02 c0       	rjmp	.+4      	; 0xfd4 <APP_checkPassword+0x196>
	}
}
     fd0:	8a 89       	ldd	r24, Y+18	; 0x12
     fd2:	8b 8b       	std	Y+19, r24	; 0x13
     fd4:	8b 89       	ldd	r24, Y+19	; 0x13
     fd6:	63 96       	adiw	r28, 0x13	; 19
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <APP_openDoor>:
/*
 * Description :
 * Functional responsible for Show the door state on LCD.
 */
void APP_openDoor(void)
{
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <APP_openDoor+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <APP_openDoor+0x8>
     ff4:	cd b7       	in	r28, 0x3d	; 61
     ff6:	de b7       	in	r29, 0x3e	; 62
	Timer0_ConfigType Timer0_Config = {NORMAL,0x00,0xFF,F_CPU_1024};
     ff8:	19 82       	std	Y+1, r1	; 0x01
     ffa:	1a 82       	std	Y+2, r1	; 0x02
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	85 e0       	ldi	r24, 0x05	; 5
    1002:	8c 83       	std	Y+4, r24	; 0x04

	Timer0_init(&Timer0_Config);
    1004:	ce 01       	movw	r24, r28
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Timer0_init>
	LCD_clearScreen();
    100c:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Unlocking door");
    1010:	2d e8       	ldi	r18, 0x8D	; 141
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	60 e0       	ldi	r22, 0x00	; 0
    1018:	a9 01       	movw	r20, r18
    101a:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	while (g_incrementer < 458){} /* wait for 15 Second */
    101e:	80 91 f2 00 	lds	r24, 0x00F2
    1022:	90 91 f3 00 	lds	r25, 0x00F3
    1026:	21 e0       	ldi	r18, 0x01	; 1
    1028:	8a 3c       	cpi	r24, 0xCA	; 202
    102a:	92 07       	cpc	r25, r18
    102c:	c0 f3       	brcs	.-16     	; 0x101e <APP_openDoor+0x32>
	g_incrementer = 0;
    102e:	10 92 f3 00 	sts	0x00F3, r1
    1032:	10 92 f2 00 	sts	0x00F2, r1
	Timer0_DeInit();
    1036:	0e 94 41 13 	call	0x2682	; 0x2682 <Timer0_DeInit>

	Timer0_init(&Timer0_Config);
    103a:	ce 01       	movw	r24, r28
    103c:	01 96       	adiw	r24, 0x01	; 1
    103e:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Timer0_init>
	LCD_clearScreen();
    1042:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Door is unlocked");
    1046:	2c e9       	ldi	r18, 0x9C	; 156
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	60 e0       	ldi	r22, 0x00	; 0
    104e:	a9 01       	movw	r20, r18
    1050:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	while (g_incrementer < 92){} /* wait for 3 Second */
    1054:	80 91 f2 00 	lds	r24, 0x00F2
    1058:	90 91 f3 00 	lds	r25, 0x00F3
    105c:	8c 35       	cpi	r24, 0x5C	; 92
    105e:	91 05       	cpc	r25, r1
    1060:	c8 f3       	brcs	.-14     	; 0x1054 <APP_openDoor+0x68>
	g_incrementer = 0;
    1062:	10 92 f3 00 	sts	0x00F3, r1
    1066:	10 92 f2 00 	sts	0x00F2, r1
	Timer0_DeInit();
    106a:	0e 94 41 13 	call	0x2682	; 0x2682 <Timer0_DeInit>

	Timer0_init(&Timer0_Config);
    106e:	ce 01       	movw	r24, r28
    1070:	01 96       	adiw	r24, 0x01	; 1
    1072:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Timer0_init>
	LCD_clearScreen();
    1076:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"locking door");
    107a:	2d ea       	ldi	r18, 0xAD	; 173
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	a9 01       	movw	r20, r18
    1084:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	while (g_incrementer < 458){} /* wait for 15 Second */
    1088:	80 91 f2 00 	lds	r24, 0x00F2
    108c:	90 91 f3 00 	lds	r25, 0x00F3
    1090:	21 e0       	ldi	r18, 0x01	; 1
    1092:	8a 3c       	cpi	r24, 0xCA	; 202
    1094:	92 07       	cpc	r25, r18
    1096:	c0 f3       	brcs	.-16     	; 0x1088 <APP_openDoor+0x9c>
	g_incrementer = 0;
    1098:	10 92 f3 00 	sts	0x00F3, r1
    109c:	10 92 f2 00 	sts	0x00F2, r1
	Timer0_DeInit();
    10a0:	0e 94 41 13 	call	0x2682	; 0x2682 <Timer0_DeInit>
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	08 95       	ret

000010b2 <APP_buzzerON>:
/*
 * Description :
 * Functional responsible for Generate error message for a minute when mismatch the password 3 times.
 */
void APP_buzzerON(void)
{
    10b2:	df 93       	push	r29
    10b4:	cf 93       	push	r28
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <APP_buzzerON+0x6>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <APP_buzzerON+0x8>
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	Timer0_ConfigType Timer0_Config = {NORMAL,0x00,0xFF,F_CPU_1024};
    10be:	19 82       	std	Y+1, r1	; 0x01
    10c0:	1a 82       	std	Y+2, r1	; 0x02
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	85 e0       	ldi	r24, 0x05	; 5
    10c8:	8c 83       	std	Y+4, r24	; 0x04

	Timer0_init(&Timer0_Config);
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 e9 12 	call	0x25d2	; 0x25d2 <Timer0_init>
	LCD_clearScreen();
    10d2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"ERROR MESSAGE");
    10d6:	2a eb       	ldi	r18, 0xBA	; 186
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	80 e0       	ldi	r24, 0x00	; 0
    10dc:	60 e0       	ldi	r22, 0x00	; 0
    10de:	a9 01       	movw	r20, r18
    10e0:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	while (g_incrementer < 1832){} /* wait for one minute */
    10e4:	80 91 f2 00 	lds	r24, 0x00F2
    10e8:	90 91 f3 00 	lds	r25, 0x00F3
    10ec:	27 e0       	ldi	r18, 0x07	; 7
    10ee:	88 32       	cpi	r24, 0x28	; 40
    10f0:	92 07       	cpc	r25, r18
    10f2:	c0 f3       	brcs	.-16     	; 0x10e4 <APP_buzzerON+0x32>
	g_incrementer = 0;
    10f4:	10 92 f3 00 	sts	0x00F3, r1
    10f8:	10 92 f2 00 	sts	0x00F2, r1
	Timer0_DeInit();
    10fc:	0e 94 41 13 	call	0x2682	; 0x2682 <Timer0_DeInit>
}
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <APP_options>:
 * 1. Show the available options and take the choice
 * 2. Take password from Keypad and check it.
 * 3. if matched do the order if not show the error.
 */
void APP_options(void)
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
    1116:	60 97       	sbiw	r28, 0x10	; 16
    1118:	0f b6       	in	r0, 0x3f	; 63
    111a:	f8 94       	cli
    111c:	de bf       	out	0x3e, r29	; 62
    111e:	0f be       	out	0x3f, r0	; 63
    1120:	cd bf       	out	0x3d, r28	; 61
	uint8 a_choice;
	uint8 a_passwordCase;
	LCD_clearScreen();
    1122:	0e 94 79 12 	call	0x24f2	; 0x24f2 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"+:Open door");
    1126:	28 ec       	ldi	r18, 0xC8	; 200
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	a9 01       	movw	r20, r18
    1130:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"-:Change pass");
    1134:	24 ed       	ldi	r18, 0xD4	; 212
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	a9 01       	movw	r20, r18
    113e:	0e 94 3d 12 	call	0x247a	; 0x247a <LCD_displayStringRowColumn>
	a_choice = KEYPAD_getPressedKey();
    1142:	0e 94 cf 0c 	call	0x199e	; 0x199e <KEYPAD_getPressedKey>
    1146:	88 8b       	std	Y+16, r24	; 0x10
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a8 ec       	ldi	r26, 0xC8	; 200
    114e:	b3 e4       	ldi	r27, 0x43	; 67
    1150:	8b 87       	std	Y+11, r24	; 0x0b
    1152:	9c 87       	std	Y+12, r25	; 0x0c
    1154:	ad 87       	std	Y+13, r26	; 0x0d
    1156:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	6b 85       	ldd	r22, Y+11	; 0x0b
    115a:	7c 85       	ldd	r23, Y+12	; 0x0c
    115c:	8d 85       	ldd	r24, Y+13	; 0x0d
    115e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a ef       	ldi	r20, 0xFA	; 250
    1166:	54 e4       	ldi	r21, 0x44	; 68
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8f 83       	std	Y+7, r24	; 0x07
    1172:	98 87       	std	Y+8, r25	; 0x08
    1174:	a9 87       	std	Y+9, r26	; 0x09
    1176:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1178:	6f 81       	ldd	r22, Y+7	; 0x07
    117a:	78 85       	ldd	r23, Y+8	; 0x08
    117c:	89 85       	ldd	r24, Y+9	; 0x09
    117e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <APP_options+0x8c>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9e 83       	std	Y+6, r25	; 0x06
    1196:	8d 83       	std	Y+5, r24	; 0x05
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <APP_options+0x10a>
	else if (__tmp > 65535)
    119a:	6f 81       	ldd	r22, Y+7	; 0x07
    119c:	78 85       	ldd	r23, Y+8	; 0x08
    119e:	89 85       	ldd	r24, Y+9	; 0x09
    11a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <APP_options+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    11b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    11b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    11b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9e 83       	std	Y+6, r25	; 0x06
    11d8:	8d 83       	std	Y+5, r24	; 0x05
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <APP_options+0xec>
    11dc:	88 ec       	ldi	r24, 0xC8	; 200
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	9c 83       	std	Y+4, r25	; 0x04
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	8b 81       	ldd	r24, Y+3	; 0x03
    11e6:	9c 81       	ldd	r25, Y+4	; 0x04
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <APP_options+0xda>
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8d 81       	ldd	r24, Y+5	; 0x05
    11f2:	9e 81       	ldd	r25, Y+6	; 0x06
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9e 83       	std	Y+6, r25	; 0x06
    11f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8d 81       	ldd	r24, Y+5	; 0x05
    11fc:	9e 81       	ldd	r25, Y+6	; 0x06
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <APP_options+0xce>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <APP_options+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6f 81       	ldd	r22, Y+7	; 0x07
    1206:	78 85       	ldd	r23, Y+8	; 0x08
    1208:	89 85       	ldd	r24, Y+9	; 0x09
    120a:	9a 85       	ldd	r25, Y+10	; 0x0a
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9e 83       	std	Y+6, r25	; 0x06
    1216:	8d 83       	std	Y+5, r24	; 0x05
    1218:	8d 81       	ldd	r24, Y+5	; 0x05
    121a:	9e 81       	ldd	r25, Y+6	; 0x06
    121c:	9a 83       	std	Y+2, r25	; 0x02
    121e:	89 83       	std	Y+1, r24	; 0x01
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <APP_options+0x116>
    1228:	9a 83       	std	Y+2, r25	; 0x02
    122a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(400); /* delay to take only one charachter in a single press on Keypad */
	if (a_choice == '+')
    122c:	88 89       	ldd	r24, Y+16	; 0x10
    122e:	8b 32       	cpi	r24, 0x2B	; 43
    1230:	a9 f4       	brne	.+42     	; 0x125c <APP_options+0x14e>
	{
		a_passwordCase = APP_checkPassword();
    1232:	0e 94 1f 07 	call	0xe3e	; 0xe3e <APP_checkPassword>
    1236:	8f 87       	std	Y+15, r24	; 0x0f
		if (a_passwordCase == MATCHED)
    1238:	8f 85       	ldd	r24, Y+15	; 0x0f
    123a:	88 23       	and	r24, r24
    123c:	31 f4       	brne	.+12     	; 0x124a <APP_options+0x13c>
		{
			UART_sendByte(OPEN_DOOR);
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
			APP_openDoor();
    1244:	0e 94 f6 07 	call	0xfec	; 0xfec <APP_openDoor>
    1248:	23 c0       	rjmp	.+70     	; 0x1290 <APP_options+0x182>
		}
		else if (a_passwordCase == MISMATCHES_LIMIT)
    124a:	8f 85       	ldd	r24, Y+15	; 0x0f
    124c:	82 30       	cpi	r24, 0x02	; 2
    124e:	01 f5       	brne	.+64     	; 0x1290 <APP_options+0x182>
		{
			UART_sendByte(BUZZER_LOUD);
    1250:	8b e0       	ldi	r24, 0x0B	; 11
    1252:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
			APP_buzzerON();
    1256:	0e 94 59 08 	call	0x10b2	; 0x10b2 <APP_buzzerON>
    125a:	1a c0       	rjmp	.+52     	; 0x1290 <APP_options+0x182>
		}
	}
	else if (a_choice == '-')
    125c:	88 89       	ldd	r24, Y+16	; 0x10
    125e:	8d 32       	cpi	r24, 0x2D	; 45
    1260:	a9 f4       	brne	.+42     	; 0x128c <APP_options+0x17e>
	{
		a_passwordCase = APP_checkPassword();
    1262:	0e 94 1f 07 	call	0xe3e	; 0xe3e <APP_checkPassword>
    1266:	8f 87       	std	Y+15, r24	; 0x0f
		if (a_passwordCase == MATCHED)
    1268:	8f 85       	ldd	r24, Y+15	; 0x0f
    126a:	88 23       	and	r24, r24
    126c:	31 f4       	brne	.+12     	; 0x127a <APP_options+0x16c>
		{
			UART_sendByte(CHANGE_PASSWORD);
    126e:	8c e0       	ldi	r24, 0x0C	; 12
    1270:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
			APP_generatePassword();
    1274:	0e 94 b3 05 	call	0xb66	; 0xb66 <APP_generatePassword>
    1278:	0b c0       	rjmp	.+22     	; 0x1290 <APP_options+0x182>
		}
		else if (a_passwordCase == MISMATCHES_LIMIT)
    127a:	8f 85       	ldd	r24, Y+15	; 0x0f
    127c:	82 30       	cpi	r24, 0x02	; 2
    127e:	41 f4       	brne	.+16     	; 0x1290 <APP_options+0x182>
		{
			UART_sendByte(BUZZER_LOUD);
    1280:	8b e0       	ldi	r24, 0x0B	; 11
    1282:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
			APP_buzzerON();
    1286:	0e 94 59 08 	call	0x10b2	; 0x10b2 <APP_buzzerON>
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <APP_options+0x182>
		}
	}
	else
	{
		APP_options();
    128c:	0e 94 87 08 	call	0x110e	; 0x110e <APP_options>
	}
}
    1290:	60 96       	adiw	r28, 0x10	; 16
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret

000012a2 <main>:

int main(void)
{
    12a2:	df 93       	push	r29
    12a4:	cf 93       	push	r28
    12a6:	cd b7       	in	r28, 0x3d	; 61
    12a8:	de b7       	in	r29, 0x3e	; 62
    12aa:	2c 97       	sbiw	r28, 0x0c	; 12
    12ac:	0f b6       	in	r0, 0x3f	; 63
    12ae:	f8 94       	cli
    12b0:	de bf       	out	0x3e, r29	; 62
    12b2:	0f be       	out	0x3f, r0	; 63
    12b4:	cd bf       	out	0x3d, r28	; 61
	/* Initialize all the hardware required in these microcontroller */
	LCD_init();
    12b6:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <LCD_init>
	Uart_ConfigType Uart_Config = {_8_BIT,DISABLE,_1_BIT,9600};
    12ba:	ce 01       	movw	r24, r28
    12bc:	01 96       	adiw	r24, 0x01	; 1
    12be:	99 87       	std	Y+9, r25	; 0x09
    12c0:	88 87       	std	Y+8, r24	; 0x08
    12c2:	ea ee       	ldi	r30, 0xEA	; 234
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	fb 87       	std	Y+11, r31	; 0x0b
    12c8:	ea 87       	std	Y+10, r30	; 0x0a
    12ca:	f7 e0       	ldi	r31, 0x07	; 7
    12cc:	fc 87       	std	Y+12, r31	; 0x0c
    12ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    12d0:	fb 85       	ldd	r31, Y+11	; 0x0b
    12d2:	00 80       	ld	r0, Z
    12d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12d6:	9b 85       	ldd	r25, Y+11	; 0x0b
    12d8:	01 96       	adiw	r24, 0x01	; 1
    12da:	9b 87       	std	Y+11, r25	; 0x0b
    12dc:	8a 87       	std	Y+10, r24	; 0x0a
    12de:	e8 85       	ldd	r30, Y+8	; 0x08
    12e0:	f9 85       	ldd	r31, Y+9	; 0x09
    12e2:	00 82       	st	Z, r0
    12e4:	88 85       	ldd	r24, Y+8	; 0x08
    12e6:	99 85       	ldd	r25, Y+9	; 0x09
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	99 87       	std	Y+9, r25	; 0x09
    12ec:	88 87       	std	Y+8, r24	; 0x08
    12ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    12f0:	91 50       	subi	r25, 0x01	; 1
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ec 85       	ldd	r30, Y+12	; 0x0c
    12f6:	ee 23       	and	r30, r30
    12f8:	51 f7       	brne	.-44     	; 0x12ce <main+0x2c>
	UART_init(&Uart_Config);
    12fa:	ce 01       	movw	r24, r28
    12fc:	01 96       	adiw	r24, 0x01	; 1
    12fe:	0e 94 5f 13 	call	0x26be	; 0x26be <UART_init>

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    1302:	af e5       	ldi	r26, 0x5F	; 95
    1304:	b0 e0       	ldi	r27, 0x00	; 0
    1306:	ef e5       	ldi	r30, 0x5F	; 95
    1308:	f0 e0       	ldi	r31, 0x00	; 0
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	8c 93       	st	X, r24
	Timer0_setCallBack(APP_counting);
    1310:	83 ea       	ldi	r24, 0xA3	; 163
    1312:	95 e0       	ldi	r25, 0x05	; 5
    1314:	0e 94 2f 13 	call	0x265e	; 0x265e <Timer0_setCallBack>
	/* Generate the Password at the start of the Program */
	APP_generatePassword();
    1318:	0e 94 b3 05 	call	0xb66	; 0xb66 <APP_generatePassword>

	while(1)
	{
		/* Stay in the options until turn off the system */
		APP_options();
    131c:	0e 94 87 08 	call	0x110e	; 0x110e <APP_options>
    1320:	fd cf       	rjmp	.-6      	; 0x131c <main+0x7a>

00001322 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1322:	df 93       	push	r29
    1324:	cf 93       	push	r28
    1326:	00 d0       	rcall	.+0      	; 0x1328 <GPIO_setupPinDirection+0x6>
    1328:	00 d0       	rcall	.+0      	; 0x132a <GPIO_setupPinDirection+0x8>
    132a:	0f 92       	push	r0
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	6a 83       	std	Y+2, r22	; 0x02
    1334:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1336:	8a 81       	ldd	r24, Y+2	; 0x02
    1338:	88 30       	cpi	r24, 0x08	; 8
    133a:	08 f0       	brcs	.+2      	; 0x133e <GPIO_setupPinDirection+0x1c>
    133c:	d5 c0       	rjmp	.+426    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	08 f0       	brcs	.+2      	; 0x1346 <GPIO_setupPinDirection+0x24>
    1344:	d1 c0       	rjmp	.+418    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1346:	89 81       	ldd	r24, Y+1	; 0x01
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3d 83       	std	Y+5, r19	; 0x05
    134e:	2c 83       	std	Y+4, r18	; 0x04
    1350:	8c 81       	ldd	r24, Y+4	; 0x04
    1352:	9d 81       	ldd	r25, Y+5	; 0x05
    1354:	81 30       	cpi	r24, 0x01	; 1
    1356:	91 05       	cpc	r25, r1
    1358:	09 f4       	brne	.+2      	; 0x135c <GPIO_setupPinDirection+0x3a>
    135a:	43 c0       	rjmp	.+134    	; 0x13e2 <GPIO_setupPinDirection+0xc0>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <GPIO_setupPinDirection+0x4e>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	71 f0       	breq	.+28     	; 0x138a <GPIO_setupPinDirection+0x68>
    136e:	bc c0       	rjmp	.+376    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <GPIO_setupPinDirection+0x5a>
    137a:	5f c0       	rjmp	.+190    	; 0x143a <GPIO_setupPinDirection+0x118>
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	9d 81       	ldd	r25, Y+5	; 0x05
    1380:	83 30       	cpi	r24, 0x03	; 3
    1382:	91 05       	cpc	r25, r1
    1384:	09 f4       	brne	.+2      	; 0x1388 <GPIO_setupPinDirection+0x66>
    1386:	85 c0       	rjmp	.+266    	; 0x1492 <GPIO_setupPinDirection+0x170>
    1388:	af c0       	rjmp	.+350    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	a1 f4       	brne	.+40     	; 0x13b8 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1390:	aa e3       	ldi	r26, 0x3A	; 58
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ea e3       	ldi	r30, 0x3A	; 58
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	48 2f       	mov	r20, r24
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	28 2f       	mov	r18, r24
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 2e       	mov	r0, r18
    13a8:	02 c0       	rjmp	.+4      	; 0x13ae <GPIO_setupPinDirection+0x8c>
    13aa:	88 0f       	add	r24, r24
    13ac:	99 1f       	adc	r25, r25
    13ae:	0a 94       	dec	r0
    13b0:	e2 f7       	brpl	.-8      	; 0x13aa <GPIO_setupPinDirection+0x88>
    13b2:	84 2b       	or	r24, r20
    13b4:	8c 93       	st	X, r24
    13b6:	98 c0       	rjmp	.+304    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    13b8:	aa e3       	ldi	r26, 0x3A	; 58
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ea e3       	ldi	r30, 0x3A	; 58
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	48 2f       	mov	r20, r24
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	02 2e       	mov	r0, r18
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <GPIO_setupPinDirection+0xb4>
    13d2:	88 0f       	add	r24, r24
    13d4:	99 1f       	adc	r25, r25
    13d6:	0a 94       	dec	r0
    13d8:	e2 f7       	brpl	.-8      	; 0x13d2 <GPIO_setupPinDirection+0xb0>
    13da:	80 95       	com	r24
    13dc:	84 23       	and	r24, r20
    13de:	8c 93       	st	X, r24
    13e0:	83 c0       	rjmp	.+262    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	a1 f4       	brne	.+40     	; 0x1410 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    13e8:	a7 e3       	ldi	r26, 0x37	; 55
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e7 e3       	ldi	r30, 0x37	; 55
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	48 2f       	mov	r20, r24
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	02 2e       	mov	r0, r18
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <GPIO_setupPinDirection+0xe4>
    1402:	88 0f       	add	r24, r24
    1404:	99 1f       	adc	r25, r25
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <GPIO_setupPinDirection+0xe0>
    140a:	84 2b       	or	r24, r20
    140c:	8c 93       	st	X, r24
    140e:	6c c0       	rjmp	.+216    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1410:	a7 e3       	ldi	r26, 0x37	; 55
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e7 e3       	ldi	r30, 0x37	; 55
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	48 2f       	mov	r20, r24
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	28 2f       	mov	r18, r24
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	02 2e       	mov	r0, r18
    1428:	02 c0       	rjmp	.+4      	; 0x142e <GPIO_setupPinDirection+0x10c>
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	0a 94       	dec	r0
    1430:	e2 f7       	brpl	.-8      	; 0x142a <GPIO_setupPinDirection+0x108>
    1432:	80 95       	com	r24
    1434:	84 23       	and	r24, r20
    1436:	8c 93       	st	X, r24
    1438:	57 c0       	rjmp	.+174    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	81 30       	cpi	r24, 0x01	; 1
    143e:	a1 f4       	brne	.+40     	; 0x1468 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1440:	a4 e3       	ldi	r26, 0x34	; 52
    1442:	b0 e0       	ldi	r27, 0x00	; 0
    1444:	e4 e3       	ldi	r30, 0x34	; 52
    1446:	f0 e0       	ldi	r31, 0x00	; 0
    1448:	80 81       	ld	r24, Z
    144a:	48 2f       	mov	r20, r24
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	02 2e       	mov	r0, r18
    1458:	02 c0       	rjmp	.+4      	; 0x145e <GPIO_setupPinDirection+0x13c>
    145a:	88 0f       	add	r24, r24
    145c:	99 1f       	adc	r25, r25
    145e:	0a 94       	dec	r0
    1460:	e2 f7       	brpl	.-8      	; 0x145a <GPIO_setupPinDirection+0x138>
    1462:	84 2b       	or	r24, r20
    1464:	8c 93       	st	X, r24
    1466:	40 c0       	rjmp	.+128    	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1468:	a4 e3       	ldi	r26, 0x34	; 52
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e4 e3       	ldi	r30, 0x34	; 52
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	48 2f       	mov	r20, r24
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	02 2e       	mov	r0, r18
    1480:	02 c0       	rjmp	.+4      	; 0x1486 <GPIO_setupPinDirection+0x164>
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	0a 94       	dec	r0
    1488:	e2 f7       	brpl	.-8      	; 0x1482 <GPIO_setupPinDirection+0x160>
    148a:	80 95       	com	r24
    148c:	84 23       	and	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	2b c0       	rjmp	.+86     	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	81 30       	cpi	r24, 0x01	; 1
    1496:	a1 f4       	brne	.+40     	; 0x14c0 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1498:	a1 e3       	ldi	r26, 0x31	; 49
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e1 e3       	ldi	r30, 0x31	; 49
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <GPIO_setupPinDirection+0x194>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <GPIO_setupPinDirection+0x190>
    14ba:	84 2b       	or	r24, r20
    14bc:	8c 93       	st	X, r24
    14be:	14 c0       	rjmp	.+40     	; 0x14e8 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    14c0:	a1 e3       	ldi	r26, 0x31	; 49
    14c2:	b0 e0       	ldi	r27, 0x00	; 0
    14c4:	e1 e3       	ldi	r30, 0x31	; 49
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	80 81       	ld	r24, Z
    14ca:	48 2f       	mov	r20, r24
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	02 2e       	mov	r0, r18
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <GPIO_setupPinDirection+0x1bc>
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	0a 94       	dec	r0
    14e0:	e2 f7       	brpl	.-8      	; 0x14da <GPIO_setupPinDirection+0x1b8>
    14e2:	80 95       	com	r24
    14e4:	84 23       	and	r24, r20
    14e6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <GPIO_writePin+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <GPIO_writePin+0x8>
    1500:	0f 92       	push	r0
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	89 83       	std	Y+1, r24	; 0x01
    1508:	6a 83       	std	Y+2, r22	; 0x02
    150a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    150c:	8a 81       	ldd	r24, Y+2	; 0x02
    150e:	88 30       	cpi	r24, 0x08	; 8
    1510:	08 f0       	brcs	.+2      	; 0x1514 <GPIO_writePin+0x1c>
    1512:	d5 c0       	rjmp	.+426    	; 0x16be <GPIO_writePin+0x1c6>
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	08 f0       	brcs	.+2      	; 0x151c <GPIO_writePin+0x24>
    151a:	d1 c0       	rjmp	.+418    	; 0x16be <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    151c:	89 81       	ldd	r24, Y+1	; 0x01
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3d 83       	std	Y+5, r19	; 0x05
    1524:	2c 83       	std	Y+4, r18	; 0x04
    1526:	8c 81       	ldd	r24, Y+4	; 0x04
    1528:	9d 81       	ldd	r25, Y+5	; 0x05
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	91 05       	cpc	r25, r1
    152e:	09 f4       	brne	.+2      	; 0x1532 <GPIO_writePin+0x3a>
    1530:	43 c0       	rjmp	.+134    	; 0x15b8 <GPIO_writePin+0xc0>
    1532:	2c 81       	ldd	r18, Y+4	; 0x04
    1534:	3d 81       	ldd	r19, Y+5	; 0x05
    1536:	22 30       	cpi	r18, 0x02	; 2
    1538:	31 05       	cpc	r19, r1
    153a:	2c f4       	brge	.+10     	; 0x1546 <GPIO_writePin+0x4e>
    153c:	8c 81       	ldd	r24, Y+4	; 0x04
    153e:	9d 81       	ldd	r25, Y+5	; 0x05
    1540:	00 97       	sbiw	r24, 0x00	; 0
    1542:	71 f0       	breq	.+28     	; 0x1560 <GPIO_writePin+0x68>
    1544:	bc c0       	rjmp	.+376    	; 0x16be <GPIO_writePin+0x1c6>
    1546:	2c 81       	ldd	r18, Y+4	; 0x04
    1548:	3d 81       	ldd	r19, Y+5	; 0x05
    154a:	22 30       	cpi	r18, 0x02	; 2
    154c:	31 05       	cpc	r19, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <GPIO_writePin+0x5a>
    1550:	5f c0       	rjmp	.+190    	; 0x1610 <GPIO_writePin+0x118>
    1552:	8c 81       	ldd	r24, Y+4	; 0x04
    1554:	9d 81       	ldd	r25, Y+5	; 0x05
    1556:	83 30       	cpi	r24, 0x03	; 3
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <GPIO_writePin+0x66>
    155c:	85 c0       	rjmp	.+266    	; 0x1668 <GPIO_writePin+0x170>
    155e:	af c0       	rjmp	.+350    	; 0x16be <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	a1 f4       	brne	.+40     	; 0x158e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1566:	ab e3       	ldi	r26, 0x3B	; 59
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	eb e3       	ldi	r30, 0x3B	; 59
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_writePin+0x8c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_writePin+0x88>
    1588:	84 2b       	or	r24, r20
    158a:	8c 93       	st	X, r24
    158c:	98 c0       	rjmp	.+304    	; 0x16be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    158e:	ab e3       	ldi	r26, 0x3B	; 59
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	eb e3       	ldi	r30, 0x3B	; 59
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8a 81       	ldd	r24, Y+2	; 0x02
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <GPIO_writePin+0xb4>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <GPIO_writePin+0xb0>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	83 c0       	rjmp	.+262    	; 0x16be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	a1 f4       	brne	.+40     	; 0x15e6 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    15be:	a8 e3       	ldi	r26, 0x38	; 56
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e8 e3       	ldi	r30, 0x38	; 56
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_writePin+0xe4>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_writePin+0xe0>
    15e0:	84 2b       	or	r24, r20
    15e2:	8c 93       	st	X, r24
    15e4:	6c c0       	rjmp	.+216    	; 0x16be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    15e6:	a8 e3       	ldi	r26, 0x38	; 56
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e8 e3       	ldi	r30, 0x38	; 56
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	48 2f       	mov	r20, r24
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	28 2f       	mov	r18, r24
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	02 2e       	mov	r0, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_writePin+0x10c>
    1600:	88 0f       	add	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	0a 94       	dec	r0
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_writePin+0x108>
    1608:	80 95       	com	r24
    160a:	84 23       	and	r24, r20
    160c:	8c 93       	st	X, r24
    160e:	57 c0       	rjmp	.+174    	; 0x16be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	a1 f4       	brne	.+40     	; 0x163e <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1616:	a5 e3       	ldi	r26, 0x35	; 53
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e5 e3       	ldi	r30, 0x35	; 53
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_writePin+0x13c>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_writePin+0x138>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
    163c:	40 c0       	rjmp	.+128    	; 0x16be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    163e:	a5 e3       	ldi	r26, 0x35	; 53
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	e5 e3       	ldi	r30, 0x35	; 53
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	48 2f       	mov	r20, r24
    164a:	8a 81       	ldd	r24, Y+2	; 0x02
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	02 2e       	mov	r0, r18
    1656:	02 c0       	rjmp	.+4      	; 0x165c <GPIO_writePin+0x164>
    1658:	88 0f       	add	r24, r24
    165a:	99 1f       	adc	r25, r25
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <GPIO_writePin+0x160>
    1660:	80 95       	com	r24
    1662:	84 23       	and	r24, r20
    1664:	8c 93       	st	X, r24
    1666:	2b c0       	rjmp	.+86     	; 0x16be <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	81 30       	cpi	r24, 0x01	; 1
    166c:	a1 f4       	brne	.+40     	; 0x1696 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    166e:	a2 e3       	ldi	r26, 0x32	; 50
    1670:	b0 e0       	ldi	r27, 0x00	; 0
    1672:	e2 e3       	ldi	r30, 0x32	; 50
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	80 81       	ld	r24, Z
    1678:	48 2f       	mov	r20, r24
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	02 2e       	mov	r0, r18
    1686:	02 c0       	rjmp	.+4      	; 0x168c <GPIO_writePin+0x194>
    1688:	88 0f       	add	r24, r24
    168a:	99 1f       	adc	r25, r25
    168c:	0a 94       	dec	r0
    168e:	e2 f7       	brpl	.-8      	; 0x1688 <GPIO_writePin+0x190>
    1690:	84 2b       	or	r24, r20
    1692:	8c 93       	st	X, r24
    1694:	14 c0       	rjmp	.+40     	; 0x16be <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1696:	a2 e3       	ldi	r26, 0x32	; 50
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e2 e3       	ldi	r30, 0x32	; 50
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	48 2f       	mov	r20, r24
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	02 2e       	mov	r0, r18
    16ae:	02 c0       	rjmp	.+4      	; 0x16b4 <GPIO_writePin+0x1bc>
    16b0:	88 0f       	add	r24, r24
    16b2:	99 1f       	adc	r25, r25
    16b4:	0a 94       	dec	r0
    16b6:	e2 f7       	brpl	.-8      	; 0x16b0 <GPIO_writePin+0x1b8>
    16b8:	80 95       	com	r24
    16ba:	84 23       	and	r24, r20
    16bc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	cf 91       	pop	r28
    16ca:	df 91       	pop	r29
    16cc:	08 95       	ret

000016ce <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    16ce:	df 93       	push	r29
    16d0:	cf 93       	push	r28
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_readPin+0x6>
    16d4:	00 d0       	rcall	.+0      	; 0x16d6 <GPIO_readPin+0x8>
    16d6:	0f 92       	push	r0
    16d8:	cd b7       	in	r28, 0x3d	; 61
    16da:	de b7       	in	r29, 0x3e	; 62
    16dc:	8a 83       	std	Y+2, r24	; 0x02
    16de:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    16e0:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	88 30       	cpi	r24, 0x08	; 8
    16e6:	08 f0       	brcs	.+2      	; 0x16ea <GPIO_readPin+0x1c>
    16e8:	84 c0       	rjmp	.+264    	; 0x17f2 <GPIO_readPin+0x124>
    16ea:	8a 81       	ldd	r24, Y+2	; 0x02
    16ec:	84 30       	cpi	r24, 0x04	; 4
    16ee:	08 f0       	brcs	.+2      	; 0x16f2 <GPIO_readPin+0x24>
    16f0:	80 c0       	rjmp	.+256    	; 0x17f2 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    16f2:	8a 81       	ldd	r24, Y+2	; 0x02
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	3d 83       	std	Y+5, r19	; 0x05
    16fa:	2c 83       	std	Y+4, r18	; 0x04
    16fc:	4c 81       	ldd	r20, Y+4	; 0x04
    16fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1700:	41 30       	cpi	r20, 0x01	; 1
    1702:	51 05       	cpc	r21, r1
    1704:	79 f1       	breq	.+94     	; 0x1764 <GPIO_readPin+0x96>
    1706:	8c 81       	ldd	r24, Y+4	; 0x04
    1708:	9d 81       	ldd	r25, Y+5	; 0x05
    170a:	82 30       	cpi	r24, 0x02	; 2
    170c:	91 05       	cpc	r25, r1
    170e:	34 f4       	brge	.+12     	; 0x171c <GPIO_readPin+0x4e>
    1710:	2c 81       	ldd	r18, Y+4	; 0x04
    1712:	3d 81       	ldd	r19, Y+5	; 0x05
    1714:	21 15       	cp	r18, r1
    1716:	31 05       	cpc	r19, r1
    1718:	69 f0       	breq	.+26     	; 0x1734 <GPIO_readPin+0x66>
    171a:	6b c0       	rjmp	.+214    	; 0x17f2 <GPIO_readPin+0x124>
    171c:	4c 81       	ldd	r20, Y+4	; 0x04
    171e:	5d 81       	ldd	r21, Y+5	; 0x05
    1720:	42 30       	cpi	r20, 0x02	; 2
    1722:	51 05       	cpc	r21, r1
    1724:	b9 f1       	breq	.+110    	; 0x1794 <GPIO_readPin+0xc6>
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <GPIO_readPin+0x64>
    1730:	49 c0       	rjmp	.+146    	; 0x17c4 <GPIO_readPin+0xf6>
    1732:	5f c0       	rjmp	.+190    	; 0x17f2 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1734:	e9 e3       	ldi	r30, 0x39	; 57
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	88 2f       	mov	r24, r24
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a9 01       	movw	r20, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <GPIO_readPin+0x7e>
    1748:	55 95       	asr	r21
    174a:	47 95       	ror	r20
    174c:	8a 95       	dec	r24
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <GPIO_readPin+0x7a>
    1750:	ca 01       	movw	r24, r20
    1752:	81 70       	andi	r24, 0x01	; 1
    1754:	90 70       	andi	r25, 0x00	; 0
    1756:	88 23       	and	r24, r24
    1758:	19 f0       	breq	.+6      	; 0x1760 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	49 c0       	rjmp	.+146    	; 0x17f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1760:	19 82       	std	Y+1, r1	; 0x01
    1762:	47 c0       	rjmp	.+142    	; 0x17f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1764:	e6 e3       	ldi	r30, 0x36	; 54
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	8b 81       	ldd	r24, Y+3	; 0x03
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	a9 01       	movw	r20, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <GPIO_readPin+0xae>
    1778:	55 95       	asr	r21
    177a:	47 95       	ror	r20
    177c:	8a 95       	dec	r24
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <GPIO_readPin+0xaa>
    1780:	ca 01       	movw	r24, r20
    1782:	81 70       	andi	r24, 0x01	; 1
    1784:	90 70       	andi	r25, 0x00	; 0
    1786:	88 23       	and	r24, r24
    1788:	19 f0       	breq	.+6      	; 0x1790 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	89 83       	std	Y+1, r24	; 0x01
    178e:	31 c0       	rjmp	.+98     	; 0x17f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1790:	19 82       	std	Y+1, r1	; 0x01
    1792:	2f c0       	rjmp	.+94     	; 0x17f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1794:	e3 e3       	ldi	r30, 0x33	; 51
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	8b 81       	ldd	r24, Y+3	; 0x03
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a9 01       	movw	r20, r18
    17a6:	02 c0       	rjmp	.+4      	; 0x17ac <GPIO_readPin+0xde>
    17a8:	55 95       	asr	r21
    17aa:	47 95       	ror	r20
    17ac:	8a 95       	dec	r24
    17ae:	e2 f7       	brpl	.-8      	; 0x17a8 <GPIO_readPin+0xda>
    17b0:	ca 01       	movw	r24, r20
    17b2:	81 70       	andi	r24, 0x01	; 1
    17b4:	90 70       	andi	r25, 0x00	; 0
    17b6:	88 23       	and	r24, r24
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	19 c0       	rjmp	.+50     	; 0x17f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17c0:	19 82       	std	Y+1, r1	; 0x01
    17c2:	17 c0       	rjmp	.+46     	; 0x17f2 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    17c4:	e0 e3       	ldi	r30, 0x30	; 48
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_readPin+0x10e>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_readPin+0x10a>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	88 23       	and	r24, r24
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	01 c0       	rjmp	.+2      	; 0x17f2 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f0:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	00 d0       	rcall	.+0      	; 0x180a <GPIO_setupPortDirection+0x6>
    180a:	00 d0       	rcall	.+0      	; 0x180c <GPIO_setupPortDirection+0x8>
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	89 83       	std	Y+1, r24	; 0x01
    1812:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	84 30       	cpi	r24, 0x04	; 4
    1818:	90 f5       	brcc	.+100    	; 0x187e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	3c 83       	std	Y+4, r19	; 0x04
    1822:	2b 83       	std	Y+3, r18	; 0x03
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	9c 81       	ldd	r25, Y+4	; 0x04
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	91 05       	cpc	r25, r1
    182c:	d1 f0       	breq	.+52     	; 0x1862 <GPIO_setupPortDirection+0x5e>
    182e:	2b 81       	ldd	r18, Y+3	; 0x03
    1830:	3c 81       	ldd	r19, Y+4	; 0x04
    1832:	22 30       	cpi	r18, 0x02	; 2
    1834:	31 05       	cpc	r19, r1
    1836:	2c f4       	brge	.+10     	; 0x1842 <GPIO_setupPortDirection+0x3e>
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	9c 81       	ldd	r25, Y+4	; 0x04
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	61 f0       	breq	.+24     	; 0x1858 <GPIO_setupPortDirection+0x54>
    1840:	1e c0       	rjmp	.+60     	; 0x187e <GPIO_setupPortDirection+0x7a>
    1842:	2b 81       	ldd	r18, Y+3	; 0x03
    1844:	3c 81       	ldd	r19, Y+4	; 0x04
    1846:	22 30       	cpi	r18, 0x02	; 2
    1848:	31 05       	cpc	r19, r1
    184a:	81 f0       	breq	.+32     	; 0x186c <GPIO_setupPortDirection+0x68>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	81 f0       	breq	.+32     	; 0x1876 <GPIO_setupPortDirection+0x72>
    1856:	13 c0       	rjmp	.+38     	; 0x187e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1858:	ea e3       	ldi	r30, 0x3A	; 58
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	80 83       	st	Z, r24
    1860:	0e c0       	rjmp	.+28     	; 0x187e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1862:	e7 e3       	ldi	r30, 0x37	; 55
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	80 83       	st	Z, r24
    186a:	09 c0       	rjmp	.+18     	; 0x187e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    186c:	e4 e3       	ldi	r30, 0x34	; 52
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	8a 81       	ldd	r24, Y+2	; 0x02
    1872:	80 83       	st	Z, r24
    1874:	04 c0       	rjmp	.+8      	; 0x187e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1876:	e1 e3       	ldi	r30, 0x31	; 49
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	80 83       	st	Z, r24
			break;
		}
	}
}
    187e:	0f 90       	pop	r0
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	cf 91       	pop	r28
    1888:	df 91       	pop	r29
    188a:	08 95       	ret

0000188c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    188c:	df 93       	push	r29
    188e:	cf 93       	push	r28
    1890:	00 d0       	rcall	.+0      	; 0x1892 <GPIO_writePort+0x6>
    1892:	00 d0       	rcall	.+0      	; 0x1894 <GPIO_writePort+0x8>
    1894:	cd b7       	in	r28, 0x3d	; 61
    1896:	de b7       	in	r29, 0x3e	; 62
    1898:	89 83       	std	Y+1, r24	; 0x01
    189a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	84 30       	cpi	r24, 0x04	; 4
    18a0:	90 f5       	brcc	.+100    	; 0x1906 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	28 2f       	mov	r18, r24
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	3c 83       	std	Y+4, r19	; 0x04
    18aa:	2b 83       	std	Y+3, r18	; 0x03
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	9c 81       	ldd	r25, Y+4	; 0x04
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	91 05       	cpc	r25, r1
    18b4:	d1 f0       	breq	.+52     	; 0x18ea <GPIO_writePort+0x5e>
    18b6:	2b 81       	ldd	r18, Y+3	; 0x03
    18b8:	3c 81       	ldd	r19, Y+4	; 0x04
    18ba:	22 30       	cpi	r18, 0x02	; 2
    18bc:	31 05       	cpc	r19, r1
    18be:	2c f4       	brge	.+10     	; 0x18ca <GPIO_writePort+0x3e>
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	00 97       	sbiw	r24, 0x00	; 0
    18c6:	61 f0       	breq	.+24     	; 0x18e0 <GPIO_writePort+0x54>
    18c8:	1e c0       	rjmp	.+60     	; 0x1906 <GPIO_writePort+0x7a>
    18ca:	2b 81       	ldd	r18, Y+3	; 0x03
    18cc:	3c 81       	ldd	r19, Y+4	; 0x04
    18ce:	22 30       	cpi	r18, 0x02	; 2
    18d0:	31 05       	cpc	r19, r1
    18d2:	81 f0       	breq	.+32     	; 0x18f4 <GPIO_writePort+0x68>
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	9c 81       	ldd	r25, Y+4	; 0x04
    18d8:	83 30       	cpi	r24, 0x03	; 3
    18da:	91 05       	cpc	r25, r1
    18dc:	81 f0       	breq	.+32     	; 0x18fe <GPIO_writePort+0x72>
    18de:	13 c0       	rjmp	.+38     	; 0x1906 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    18e0:	eb e3       	ldi	r30, 0x3B	; 59
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	8a 81       	ldd	r24, Y+2	; 0x02
    18e6:	80 83       	st	Z, r24
    18e8:	0e c0       	rjmp	.+28     	; 0x1906 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    18ea:	e8 e3       	ldi	r30, 0x38	; 56
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	80 83       	st	Z, r24
    18f2:	09 c0       	rjmp	.+18     	; 0x1906 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    18f4:	e5 e3       	ldi	r30, 0x35	; 53
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8a 81       	ldd	r24, Y+2	; 0x02
    18fa:	80 83       	st	Z, r24
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    18fe:	e2 e3       	ldi	r30, 0x32	; 50
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	80 83       	st	Z, r24
			break;
		}
	}
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	0f 90       	pop	r0
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	00 d0       	rcall	.+0      	; 0x191a <GPIO_readPort+0x6>
    191a:	00 d0       	rcall	.+0      	; 0x191c <GPIO_readPort+0x8>
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1922:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	84 30       	cpi	r24, 0x04	; 4
    1928:	90 f5       	brcc	.+100    	; 0x198e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	3c 83       	std	Y+4, r19	; 0x04
    1932:	2b 83       	std	Y+3, r18	; 0x03
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	9c 81       	ldd	r25, Y+4	; 0x04
    1938:	81 30       	cpi	r24, 0x01	; 1
    193a:	91 05       	cpc	r25, r1
    193c:	d1 f0       	breq	.+52     	; 0x1972 <GPIO_readPort+0x5e>
    193e:	2b 81       	ldd	r18, Y+3	; 0x03
    1940:	3c 81       	ldd	r19, Y+4	; 0x04
    1942:	22 30       	cpi	r18, 0x02	; 2
    1944:	31 05       	cpc	r19, r1
    1946:	2c f4       	brge	.+10     	; 0x1952 <GPIO_readPort+0x3e>
    1948:	8b 81       	ldd	r24, Y+3	; 0x03
    194a:	9c 81       	ldd	r25, Y+4	; 0x04
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	61 f0       	breq	.+24     	; 0x1968 <GPIO_readPort+0x54>
    1950:	1e c0       	rjmp	.+60     	; 0x198e <GPIO_readPort+0x7a>
    1952:	2b 81       	ldd	r18, Y+3	; 0x03
    1954:	3c 81       	ldd	r19, Y+4	; 0x04
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	81 f0       	breq	.+32     	; 0x197c <GPIO_readPort+0x68>
    195c:	8b 81       	ldd	r24, Y+3	; 0x03
    195e:	9c 81       	ldd	r25, Y+4	; 0x04
    1960:	83 30       	cpi	r24, 0x03	; 3
    1962:	91 05       	cpc	r25, r1
    1964:	81 f0       	breq	.+32     	; 0x1986 <GPIO_readPort+0x72>
    1966:	13 c0       	rjmp	.+38     	; 0x198e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1968:	e9 e3       	ldi	r30, 0x39	; 57
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	0e c0       	rjmp	.+28     	; 0x198e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1972:	e6 e3       	ldi	r30, 0x36	; 54
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	09 c0       	rjmp	.+18     	; 0x198e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    197c:	e3 e3       	ldi	r30, 0x33	; 51
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	89 83       	std	Y+1, r24	; 0x01
    1984:	04 c0       	rjmp	.+8      	; 0x198e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1986:	e0 e3       	ldi	r30, 0x30	; 48
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	80 81       	ld	r24, Z
    198c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    198e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	08 95       	ret

0000199e <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    199e:	df 93       	push	r29
    19a0:	cf 93       	push	r28
    19a2:	00 d0       	rcall	.+0      	; 0x19a4 <KEYPAD_getPressedKey+0x6>
    19a4:	0f 92       	push	r0
    19a6:	cd b7       	in	r28, 0x3d	; 61
    19a8:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    19aa:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    19ac:	1b 82       	std	Y+3, r1	; 0x03
    19ae:	43 c0       	rjmp	.+134    	; 0x1a36 <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	0e 94 02 0c 	call	0x1804	; 0x1804 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	98 2f       	mov	r25, r24
    19bc:	9c 5f       	subi	r25, 0xFC	; 252
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	69 2f       	mov	r22, r25
    19c2:	41 e0       	ldi	r20, 0x01	; 1
    19c4:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	9c 01       	movw	r18, r24
    19d0:	2c 5f       	subi	r18, 0xFC	; 252
    19d2:	3f 4f       	sbci	r19, 0xFF	; 255
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <KEYPAD_getPressedKey+0x40>
    19da:	88 0f       	add	r24, r24
    19dc:	99 1f       	adc	r25, r25
    19de:	2a 95       	dec	r18
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <KEYPAD_getPressedKey+0x3c>
    19e2:	80 95       	com	r24
    19e4:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    19e6:	80 e0       	ldi	r24, 0x00	; 0
    19e8:	69 81       	ldd	r22, Y+1	; 0x01
    19ea:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    19ee:	1a 82       	std	Y+2, r1	; 0x02
    19f0:	1c c0       	rjmp	.+56     	; 0x1a2a <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	6a 81       	ldd	r22, Y+2	; 0x02
    19f6:	0e 94 67 0b 	call	0x16ce	; 0x16ce <GPIO_readPin>
    19fa:	88 23       	and	r24, r24
    19fc:	99 f4       	brne	.+38     	; 0x1a24 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	88 2f       	mov	r24, r24
    1a02:	90 e0       	ldi	r25, 0x00	; 0
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	88 0f       	add	r24, r24
    1a0a:	99 1f       	adc	r25, r25
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	89 0f       	add	r24, r25
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	8f 5f       	subi	r24, 0xFF	; 255
    1a28:	8a 83       	std	Y+2, r24	; 0x02
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	84 30       	cpi	r24, 0x04	; 4
    1a2e:	08 f3       	brcs	.-62     	; 0x19f2 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1a30:	8b 81       	ldd	r24, Y+3	; 0x03
    1a32:	8f 5f       	subi	r24, 0xFF	; 255
    1a34:	8b 83       	std	Y+3, r24	; 0x03
    1a36:	8b 81       	ldd	r24, Y+3	; 0x03
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	08 f4       	brcc	.+2      	; 0x1a3e <KEYPAD_getPressedKey+0xa0>
    1a3c:	b9 cf       	rjmp	.-142    	; 0x19b0 <KEYPAD_getPressedKey+0x12>
    1a3e:	b6 cf       	rjmp	.-148    	; 0x19ac <KEYPAD_getPressedKey+0xe>

00001a40 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1a4e:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	28 2f       	mov	r18, r24
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	3c 83       	std	Y+4, r19	; 0x04
    1a58:	2b 83       	std	Y+3, r18	; 0x03
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	91 05       	cpc	r25, r1
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1a64:	70 c0       	rjmp	.+224    	; 0x1b46 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1a66:	2b 81       	ldd	r18, Y+3	; 0x03
    1a68:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6a:	29 30       	cpi	r18, 0x09	; 9
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	5c f5       	brge	.+86     	; 0x1ac6 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1a70:	8b 81       	ldd	r24, Y+3	; 0x03
    1a72:	9c 81       	ldd	r25, Y+4	; 0x04
    1a74:	84 30       	cpi	r24, 0x04	; 4
    1a76:	91 05       	cpc	r25, r1
    1a78:	09 f4       	brne	.+2      	; 0x1a7c <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1a7a:	59 c0       	rjmp	.+178    	; 0x1b2e <KEYPAD_4x4_adjustKeyNumber+0xee>
    1a7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a7e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a80:	25 30       	cpi	r18, 0x05	; 5
    1a82:	31 05       	cpc	r19, r1
    1a84:	9c f4       	brge	.+38     	; 0x1aac <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	82 30       	cpi	r24, 0x02	; 2
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1a90:	48 c0       	rjmp	.+144    	; 0x1b22 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1a92:	2b 81       	ldd	r18, Y+3	; 0x03
    1a94:	3c 81       	ldd	r19, Y+4	; 0x04
    1a96:	23 30       	cpi	r18, 0x03	; 3
    1a98:	31 05       	cpc	r19, r1
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1a9c:	45 c0       	rjmp	.+138    	; 0x1b28 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	81 30       	cpi	r24, 0x01	; 1
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	09 f4       	brne	.+2      	; 0x1aaa <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1aa8:	39 c0       	rjmp	.+114    	; 0x1b1c <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1aaa:	67 c0       	rjmp	.+206    	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	26 30       	cpi	r18, 0x06	; 6
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1ab6:	41 c0       	rjmp	.+130    	; 0x1b3a <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	87 30       	cpi	r24, 0x07	; 7
    1abe:	91 05       	cpc	r25, r1
    1ac0:	0c f0       	brlt	.+2      	; 0x1ac4 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1ac2:	3e c0       	rjmp	.+124    	; 0x1b40 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1ac4:	37 c0       	rjmp	.+110    	; 0x1b34 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    1aca:	2c 30       	cpi	r18, 0x0C	; 12
    1acc:	31 05       	cpc	r19, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ad0:	46 c0       	rjmp	.+140    	; 0x1b5e <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	8d 30       	cpi	r24, 0x0D	; 13
    1ad8:	91 05       	cpc	r25, r1
    1ada:	5c f4       	brge	.+22     	; 0x1af2 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1adc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ade:	3c 81       	ldd	r19, Y+4	; 0x04
    1ae0:	2a 30       	cpi	r18, 0x0A	; 10
    1ae2:	31 05       	cpc	r19, r1
    1ae4:	b1 f1       	breq	.+108    	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	8b 30       	cpi	r24, 0x0B	; 11
    1aec:	91 05       	cpc	r25, r1
    1aee:	a4 f5       	brge	.+104    	; 0x1b58 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1af0:	2d c0       	rjmp	.+90     	; 0x1b4c <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	2e 30       	cpi	r18, 0x0E	; 14
    1af8:	31 05       	cpc	r19, r1
    1afa:	b9 f1       	breq	.+110    	; 0x1b6a <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	8e 30       	cpi	r24, 0x0E	; 14
    1b02:	91 05       	cpc	r25, r1
    1b04:	7c f1       	brlt	.+94     	; 0x1b64 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	2f 30       	cpi	r18, 0x0F	; 15
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	79 f1       	breq	.+94     	; 0x1b6e <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	80 31       	cpi	r24, 0x10	; 16
    1b16:	91 05       	cpc	r25, r1
    1b18:	69 f1       	breq	.+90     	; 0x1b74 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1b1a:	2f c0       	rjmp	.+94     	; 0x1b7a <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1b1c:	87 e0       	ldi	r24, 0x07	; 7
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	2e c0       	rjmp	.+92     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1b22:	88 e0       	ldi	r24, 0x08	; 8
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	2b c0       	rjmp	.+86     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1b28:	89 e0       	ldi	r24, 0x09	; 9
    1b2a:	89 83       	std	Y+1, r24	; 0x01
    1b2c:	28 c0       	rjmp	.+80     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1b2e:	85 e2       	ldi	r24, 0x25	; 37
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	25 c0       	rjmp	.+74     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	89 83       	std	Y+1, r24	; 0x01
    1b38:	22 c0       	rjmp	.+68     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1b3a:	85 e0       	ldi	r24, 0x05	; 5
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	1f c0       	rjmp	.+62     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1b40:	86 e0       	ldi	r24, 0x06	; 6
    1b42:	89 83       	std	Y+1, r24	; 0x01
    1b44:	1c c0       	rjmp	.+56     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1b46:	8a e2       	ldi	r24, 0x2A	; 42
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	19 c0       	rjmp	.+50     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	16 c0       	rjmp	.+44     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	13 c0       	rjmp	.+38     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1b58:	83 e0       	ldi	r24, 0x03	; 3
    1b5a:	89 83       	std	Y+1, r24	; 0x01
    1b5c:	10 c0       	rjmp	.+32     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1b5e:	8d e2       	ldi	r24, 0x2D	; 45
    1b60:	89 83       	std	Y+1, r24	; 0x01
    1b62:	0d c0       	rjmp	.+26     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1b64:	8d e0       	ldi	r24, 0x0D	; 13
    1b66:	89 83       	std	Y+1, r24	; 0x01
    1b68:	0a c0       	rjmp	.+20     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1b6a:	19 82       	std	Y+1, r1	; 0x01
    1b6c:	08 c0       	rjmp	.+16     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1b6e:	8d e3       	ldi	r24, 0x3D	; 61
    1b70:	89 83       	std	Y+1, r24	; 0x01
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1b74:	8b e2       	ldi	r24, 0x2B	; 43
    1b76:	89 83       	std	Y+1, r24	; 0x01
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b8e:	df 93       	push	r29
    1b90:	cf 93       	push	r28
    1b92:	cd b7       	in	r28, 0x3d	; 61
    1b94:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b96:	83 e0       	ldi	r24, 0x03	; 3
    1b98:	65 e0       	ldi	r22, 0x05	; 5
    1b9a:	41 e0       	ldi	r20, 0x01	; 1
    1b9c:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	66 e0       	ldi	r22, 0x06	; 6
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1baa:	83 e0       	ldi	r24, 0x03	; 3
    1bac:	67 e0       	ldi	r22, 0x07	; 7
    1bae:	41 e0       	ldi	r20, 0x01	; 1
    1bb0:	0e 94 91 09 	call	0x1322	; 0x1322 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	6f ef       	ldi	r22, 0xFF	; 255
    1bb8:	0e 94 02 0c 	call	0x1804	; 0x1804 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1bbc:	88 e3       	ldi	r24, 0x38	; 56
    1bbe:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1bc2:	8c e0       	ldi	r24, 0x0C	; 12
    1bc4:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_sendCommand>
}
    1bce:	cf 91       	pop	r28
    1bd0:	df 91       	pop	r29
    1bd2:	08 95       	ret

00001bd4 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1bd4:	df 93       	push	r29
    1bd6:	cf 93       	push	r28
    1bd8:	cd b7       	in	r28, 0x3d	; 61
    1bda:	de b7       	in	r29, 0x3e	; 62
    1bdc:	e9 97       	sbiw	r28, 0x39	; 57
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	f8 94       	cli
    1be2:	de bf       	out	0x3e, r29	; 62
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	cd bf       	out	0x3d, r28	; 61
    1be8:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1bea:	83 e0       	ldi	r24, 0x03	; 3
    1bec:	65 e0       	ldi	r22, 0x05	; 5
    1bee:	40 e0       	ldi	r20, 0x00	; 0
    1bf0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1bf4:	83 e0       	ldi	r24, 0x03	; 3
    1bf6:	66 e0       	ldi	r22, 0x06	; 6
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a0 e8       	ldi	r26, 0x80	; 128
    1c04:	bf e3       	ldi	r27, 0x3F	; 63
    1c06:	8d ab       	std	Y+53, r24	; 0x35
    1c08:	9e ab       	std	Y+54, r25	; 0x36
    1c0a:	af ab       	std	Y+55, r26	; 0x37
    1c0c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c0e:	6d a9       	ldd	r22, Y+53	; 0x35
    1c10:	7e a9       	ldd	r23, Y+54	; 0x36
    1c12:	8f a9       	ldd	r24, Y+55	; 0x37
    1c14:	98 ad       	ldd	r25, Y+56	; 0x38
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	4a e7       	ldi	r20, 0x7A	; 122
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c22:	dc 01       	movw	r26, r24
    1c24:	cb 01       	movw	r24, r22
    1c26:	89 ab       	std	Y+49, r24	; 0x31
    1c28:	9a ab       	std	Y+50, r25	; 0x32
    1c2a:	ab ab       	std	Y+51, r26	; 0x33
    1c2c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c2e:	69 a9       	ldd	r22, Y+49	; 0x31
    1c30:	7a a9       	ldd	r23, Y+50	; 0x32
    1c32:	8b a9       	ldd	r24, Y+51	; 0x33
    1c34:	9c a9       	ldd	r25, Y+52	; 0x34
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	40 e8       	ldi	r20, 0x80	; 128
    1c3c:	5f e3       	ldi	r21, 0x3F	; 63
    1c3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	90 e0       	ldi	r25, 0x00	; 0
    1c4a:	98 ab       	std	Y+48, r25	; 0x30
    1c4c:	8f a7       	std	Y+47, r24	; 0x2f
    1c4e:	3f c0       	rjmp	.+126    	; 0x1cce <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1c50:	69 a9       	ldd	r22, Y+49	; 0x31
    1c52:	7a a9       	ldd	r23, Y+50	; 0x32
    1c54:	8b a9       	ldd	r24, Y+51	; 0x33
    1c56:	9c a9       	ldd	r25, Y+52	; 0x34
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	3f ef       	ldi	r19, 0xFF	; 255
    1c5c:	4f e7       	ldi	r20, 0x7F	; 127
    1c5e:	57 e4       	ldi	r21, 0x47	; 71
    1c60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c64:	18 16       	cp	r1, r24
    1c66:	4c f5       	brge	.+82     	; 0x1cba <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c68:	6d a9       	ldd	r22, Y+53	; 0x35
    1c6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c70:	20 e0       	ldi	r18, 0x00	; 0
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	40 e2       	ldi	r20, 0x20	; 32
    1c76:	51 e4       	ldi	r21, 0x41	; 65
    1c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7c:	dc 01       	movw	r26, r24
    1c7e:	cb 01       	movw	r24, r22
    1c80:	bc 01       	movw	r22, r24
    1c82:	cd 01       	movw	r24, r26
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	98 ab       	std	Y+48, r25	; 0x30
    1c8e:	8f a7       	std	Y+47, r24	; 0x2f
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_sendCommand+0xdc>
    1c92:	89 e1       	ldi	r24, 0x19	; 25
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9e a7       	std	Y+46, r25	; 0x2e
    1c98:	8d a7       	std	Y+45, r24	; 0x2d
    1c9a:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c9c:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c9e:	01 97       	sbiw	r24, 0x01	; 1
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <LCD_sendCommand+0xca>
    1ca2:	9e a7       	std	Y+46, r25	; 0x2e
    1ca4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ca8:	98 a9       	ldd	r25, Y+48	; 0x30
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	98 ab       	std	Y+48, r25	; 0x30
    1cae:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cb2:	98 a9       	ldd	r25, Y+48	; 0x30
    1cb4:	00 97       	sbiw	r24, 0x00	; 0
    1cb6:	69 f7       	brne	.-38     	; 0x1c92 <LCD_sendCommand+0xbe>
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cba:	69 a9       	ldd	r22, Y+49	; 0x31
    1cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    1cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc6:	dc 01       	movw	r26, r24
    1cc8:	cb 01       	movw	r24, r22
    1cca:	98 ab       	std	Y+48, r25	; 0x30
    1ccc:	8f a7       	std	Y+47, r24	; 0x2f
    1cce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1cd2:	9c a7       	std	Y+44, r25	; 0x2c
    1cd4:	8b a7       	std	Y+43, r24	; 0x2b
    1cd6:	8b a5       	ldd	r24, Y+43	; 0x2b
    1cd8:	9c a5       	ldd	r25, Y+44	; 0x2c
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_sendCommand+0x106>
    1cde:	9c a7       	std	Y+44, r25	; 0x2c
    1ce0:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ce2:	83 e0       	ldi	r24, 0x03	; 3
    1ce4:	67 e0       	ldi	r22, 0x07	; 7
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	a0 e8       	ldi	r26, 0x80	; 128
    1cf2:	bf e3       	ldi	r27, 0x3F	; 63
    1cf4:	8f a3       	std	Y+39, r24	; 0x27
    1cf6:	98 a7       	std	Y+40, r25	; 0x28
    1cf8:	a9 a7       	std	Y+41, r26	; 0x29
    1cfa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cfc:	6f a1       	ldd	r22, Y+39	; 0x27
    1cfe:	78 a5       	ldd	r23, Y+40	; 0x28
    1d00:	89 a5       	ldd	r24, Y+41	; 0x29
    1d02:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	53 e4       	ldi	r21, 0x43	; 67
    1d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	8b a3       	std	Y+35, r24	; 0x23
    1d16:	9c a3       	std	Y+36, r25	; 0x24
    1d18:	ad a3       	std	Y+37, r26	; 0x25
    1d1a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d1c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d20:	8d a1       	ldd	r24, Y+37	; 0x25
    1d22:	9e a1       	ldd	r25, Y+38	; 0x26
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	2c f4       	brge	.+10     	; 0x1d3e <LCD_sendCommand+0x16a>
		__ticks = 1;
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	9a a3       	std	Y+34, r25	; 0x22
    1d3a:	89 a3       	std	Y+33, r24	; 0x21
    1d3c:	3f c0       	rjmp	.+126    	; 0x1dbc <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1d3e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d40:	7c a1       	ldd	r23, Y+36	; 0x24
    1d42:	8d a1       	ldd	r24, Y+37	; 0x25
    1d44:	9e a1       	ldd	r25, Y+38	; 0x26
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	3f ef       	ldi	r19, 0xFF	; 255
    1d4a:	4f e7       	ldi	r20, 0x7F	; 127
    1d4c:	57 e4       	ldi	r21, 0x47	; 71
    1d4e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d52:	18 16       	cp	r1, r24
    1d54:	4c f5       	brge	.+82     	; 0x1da8 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d56:	6f a1       	ldd	r22, Y+39	; 0x27
    1d58:	78 a5       	ldd	r23, Y+40	; 0x28
    1d5a:	89 a5       	ldd	r24, Y+41	; 0x29
    1d5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d5e:	20 e0       	ldi	r18, 0x00	; 0
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	40 e2       	ldi	r20, 0x20	; 32
    1d64:	51 e4       	ldi	r21, 0x41	; 65
    1d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6a:	dc 01       	movw	r26, r24
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	bc 01       	movw	r22, r24
    1d70:	cd 01       	movw	r24, r26
    1d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d76:	dc 01       	movw	r26, r24
    1d78:	cb 01       	movw	r24, r22
    1d7a:	9a a3       	std	Y+34, r25	; 0x22
    1d7c:	89 a3       	std	Y+33, r24	; 0x21
    1d7e:	0f c0       	rjmp	.+30     	; 0x1d9e <LCD_sendCommand+0x1ca>
    1d80:	89 e1       	ldi	r24, 0x19	; 25
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	98 a3       	std	Y+32, r25	; 0x20
    1d86:	8f 8f       	std	Y+31, r24	; 0x1f
    1d88:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d8a:	98 a1       	ldd	r25, Y+32	; 0x20
    1d8c:	01 97       	sbiw	r24, 0x01	; 1
    1d8e:	f1 f7       	brne	.-4      	; 0x1d8c <LCD_sendCommand+0x1b8>
    1d90:	98 a3       	std	Y+32, r25	; 0x20
    1d92:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d94:	89 a1       	ldd	r24, Y+33	; 0x21
    1d96:	9a a1       	ldd	r25, Y+34	; 0x22
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9a a3       	std	Y+34, r25	; 0x22
    1d9c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9e:	89 a1       	ldd	r24, Y+33	; 0x21
    1da0:	9a a1       	ldd	r25, Y+34	; 0x22
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	69 f7       	brne	.-38     	; 0x1d80 <LCD_sendCommand+0x1ac>
    1da6:	14 c0       	rjmp	.+40     	; 0x1dd0 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da8:	6b a1       	ldd	r22, Y+35	; 0x23
    1daa:	7c a1       	ldd	r23, Y+36	; 0x24
    1dac:	8d a1       	ldd	r24, Y+37	; 0x25
    1dae:	9e a1       	ldd	r25, Y+38	; 0x26
    1db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db4:	dc 01       	movw	r26, r24
    1db6:	cb 01       	movw	r24, r22
    1db8:	9a a3       	std	Y+34, r25	; 0x22
    1dba:	89 a3       	std	Y+33, r24	; 0x21
    1dbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1dbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1dc0:	9e 8f       	std	Y+30, r25	; 0x1e
    1dc2:	8d 8f       	std	Y+29, r24	; 0x1d
    1dc4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1dc6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	f1 f7       	brne	.-4      	; 0x1dc8 <LCD_sendCommand+0x1f4>
    1dcc:	9e 8f       	std	Y+30, r25	; 0x1e
    1dce:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	69 ad       	ldd	r22, Y+57	; 0x39
    1dd4:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_writePort>
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	bf e3       	ldi	r27, 0x3F	; 63
    1de0:	89 8f       	std	Y+25, r24	; 0x19
    1de2:	9a 8f       	std	Y+26, r25	; 0x1a
    1de4:	ab 8f       	std	Y+27, r26	; 0x1b
    1de6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	69 8d       	ldd	r22, Y+25	; 0x19
    1dea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8d 8b       	std	Y+21, r24	; 0x15
    1e02:	9e 8b       	std	Y+22, r25	; 0x16
    1e04:	af 8b       	std	Y+23, r26	; 0x17
    1e06:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e08:	6d 89       	ldd	r22, Y+21	; 0x15
    1e0a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_sendCommand+0x256>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1e2a:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2c:	7e 89       	ldd	r23, Y+22	; 0x16
    1e2e:	8f 89       	ldd	r24, Y+23	; 0x17
    1e30:	98 8d       	ldd	r25, Y+24	; 0x18
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	69 8d       	ldd	r22, Y+25	; 0x19
    1e44:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9c 8b       	std	Y+20, r25	; 0x14
    1e68:	8b 8b       	std	Y+19, r24	; 0x13
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_sendCommand+0x2b6>
    1e6c:	89 e1       	ldi	r24, 0x19	; 25
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9a 8b       	std	Y+18, r25	; 0x12
    1e72:	89 8b       	std	Y+17, r24	; 0x11
    1e74:	89 89       	ldd	r24, Y+17	; 0x11
    1e76:	9a 89       	ldd	r25, Y+18	; 0x12
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_sendCommand+0x2a4>
    1e7c:	9a 8b       	std	Y+18, r25	; 0x12
    1e7e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	8b 89       	ldd	r24, Y+19	; 0x13
    1e82:	9c 89       	ldd	r25, Y+20	; 0x14
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9c 8b       	std	Y+20, r25	; 0x14
    1e88:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_sendCommand+0x298>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6d 89       	ldd	r22, Y+21	; 0x15
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9c 8b       	std	Y+20, r25	; 0x14
    1ea6:	8b 8b       	std	Y+19, r24	; 0x13
    1ea8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eaa:	9c 89       	ldd	r25, Y+20	; 0x14
    1eac:	98 8b       	std	Y+16, r25	; 0x10
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
    1eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb2:	98 89       	ldd	r25, Y+16	; 0x10
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_sendCommand+0x2e0>
    1eb8:	98 8b       	std	Y+16, r25	; 0x10
    1eba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1ebc:	83 e0       	ldi	r24, 0x03	; 3
    1ebe:	67 e0       	ldi	r22, 0x07	; 7
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	8b 87       	std	Y+11, r24	; 0x0b
    1ed0:	9c 87       	std	Y+12, r25	; 0x0c
    1ed2:	ad 87       	std	Y+13, r26	; 0x0d
    1ed4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1edc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8f 83       	std	Y+7, r24	; 0x07
    1ef0:	98 87       	std	Y+8, r25	; 0x08
    1ef2:	a9 87       	std	Y+9, r26	; 0x09
    1ef4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_sendCommand+0x344>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1f18:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1a:	78 85       	ldd	r23, Y+8	; 0x08
    1f1c:	89 85       	ldd	r24, Y+9	; 0x09
    1f1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f32:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f34:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f36:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9e 83       	std	Y+6, r25	; 0x06
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_sendCommand+0x3a4>
    1f5a:	89 e1       	ldi	r24, 0x19	; 25
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9c 83       	std	Y+4, r25	; 0x04
    1f60:	8b 83       	std	Y+3, r24	; 0x03
    1f62:	8b 81       	ldd	r24, Y+3	; 0x03
    1f64:	9c 81       	ldd	r25, Y+4	; 0x04
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_sendCommand+0x392>
    1f6a:	9c 83       	std	Y+4, r25	; 0x04
    1f6c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f70:	9e 81       	ldd	r25, Y+6	; 0x06
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9e 83       	std	Y+6, r25	; 0x06
    1f76:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8d 81       	ldd	r24, Y+5	; 0x05
    1f7a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_sendCommand+0x386>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6f 81       	ldd	r22, Y+7	; 0x07
    1f84:	78 85       	ldd	r23, Y+8	; 0x08
    1f86:	89 85       	ldd	r24, Y+9	; 0x09
    1f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9e 83       	std	Y+6, r25	; 0x06
    1f94:	8d 83       	std	Y+5, r24	; 0x05
    1f96:	8d 81       	ldd	r24, Y+5	; 0x05
    1f98:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_sendCommand+0x3ce>
    1fa6:	9a 83       	std	Y+2, r25	; 0x02
    1fa8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1faa:	e9 96       	adiw	r28, 0x39	; 57
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	cf 91       	pop	r28
    1fb8:	df 91       	pop	r29
    1fba:	08 95       	ret

00001fbc <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1fbc:	df 93       	push	r29
    1fbe:	cf 93       	push	r28
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	e9 97       	sbiw	r28, 0x39	; 57
    1fc6:	0f b6       	in	r0, 0x3f	; 63
    1fc8:	f8 94       	cli
    1fca:	de bf       	out	0x3e, r29	; 62
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	cd bf       	out	0x3d, r28	; 61
    1fd0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1fd2:	83 e0       	ldi	r24, 0x03	; 3
    1fd4:	65 e0       	ldi	r22, 0x05	; 5
    1fd6:	41 e0       	ldi	r20, 0x01	; 1
    1fd8:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fdc:	83 e0       	ldi	r24, 0x03	; 3
    1fde:	66 e0       	ldi	r22, 0x06	; 6
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e8       	ldi	r26, 0x80	; 128
    1fec:	bf e3       	ldi	r27, 0x3F	; 63
    1fee:	8d ab       	std	Y+53, r24	; 0x35
    1ff0:	9e ab       	std	Y+54, r25	; 0x36
    1ff2:	af ab       	std	Y+55, r26	; 0x37
    1ff4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ff8:	7e a9       	ldd	r23, Y+54	; 0x36
    1ffa:	8f a9       	ldd	r24, Y+55	; 0x37
    1ffc:	98 ad       	ldd	r25, Y+56	; 0x38
    1ffe:	20 e0       	ldi	r18, 0x00	; 0
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	4a e7       	ldi	r20, 0x7A	; 122
    2004:	53 e4       	ldi	r21, 0x43	; 67
    2006:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	89 ab       	std	Y+49, r24	; 0x31
    2010:	9a ab       	std	Y+50, r25	; 0x32
    2012:	ab ab       	std	Y+51, r26	; 0x33
    2014:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2016:	69 a9       	ldd	r22, Y+49	; 0x31
    2018:	7a a9       	ldd	r23, Y+50	; 0x32
    201a:	8b a9       	ldd	r24, Y+51	; 0x33
    201c:	9c a9       	ldd	r25, Y+52	; 0x34
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e8       	ldi	r20, 0x80	; 128
    2024:	5f e3       	ldi	r21, 0x3F	; 63
    2026:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    202a:	88 23       	and	r24, r24
    202c:	2c f4       	brge	.+10     	; 0x2038 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	98 ab       	std	Y+48, r25	; 0x30
    2034:	8f a7       	std	Y+47, r24	; 0x2f
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    2038:	69 a9       	ldd	r22, Y+49	; 0x31
    203a:	7a a9       	ldd	r23, Y+50	; 0x32
    203c:	8b a9       	ldd	r24, Y+51	; 0x33
    203e:	9c a9       	ldd	r25, Y+52	; 0x34
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	3f ef       	ldi	r19, 0xFF	; 255
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	57 e4       	ldi	r21, 0x47	; 71
    2048:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    204c:	18 16       	cp	r1, r24
    204e:	4c f5       	brge	.+82     	; 0x20a2 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2050:	6d a9       	ldd	r22, Y+53	; 0x35
    2052:	7e a9       	ldd	r23, Y+54	; 0x36
    2054:	8f a9       	ldd	r24, Y+55	; 0x37
    2056:	98 ad       	ldd	r25, Y+56	; 0x38
    2058:	20 e0       	ldi	r18, 0x00	; 0
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	40 e2       	ldi	r20, 0x20	; 32
    205e:	51 e4       	ldi	r21, 0x41	; 65
    2060:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2064:	dc 01       	movw	r26, r24
    2066:	cb 01       	movw	r24, r22
    2068:	bc 01       	movw	r22, r24
    206a:	cd 01       	movw	r24, r26
    206c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2070:	dc 01       	movw	r26, r24
    2072:	cb 01       	movw	r24, r22
    2074:	98 ab       	std	Y+48, r25	; 0x30
    2076:	8f a7       	std	Y+47, r24	; 0x2f
    2078:	0f c0       	rjmp	.+30     	; 0x2098 <LCD_displayCharacter+0xdc>
    207a:	89 e1       	ldi	r24, 0x19	; 25
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9e a7       	std	Y+46, r25	; 0x2e
    2080:	8d a7       	std	Y+45, r24	; 0x2d
    2082:	8d a5       	ldd	r24, Y+45	; 0x2d
    2084:	9e a5       	ldd	r25, Y+46	; 0x2e
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_displayCharacter+0xca>
    208a:	9e a7       	std	Y+46, r25	; 0x2e
    208c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2090:	98 a9       	ldd	r25, Y+48	; 0x30
    2092:	01 97       	sbiw	r24, 0x01	; 1
    2094:	98 ab       	std	Y+48, r25	; 0x30
    2096:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2098:	8f a5       	ldd	r24, Y+47	; 0x2f
    209a:	98 a9       	ldd	r25, Y+48	; 0x30
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	69 f7       	brne	.-38     	; 0x207a <LCD_displayCharacter+0xbe>
    20a0:	14 c0       	rjmp	.+40     	; 0x20ca <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20a2:	69 a9       	ldd	r22, Y+49	; 0x31
    20a4:	7a a9       	ldd	r23, Y+50	; 0x32
    20a6:	8b a9       	ldd	r24, Y+51	; 0x33
    20a8:	9c a9       	ldd	r25, Y+52	; 0x34
    20aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ae:	dc 01       	movw	r26, r24
    20b0:	cb 01       	movw	r24, r22
    20b2:	98 ab       	std	Y+48, r25	; 0x30
    20b4:	8f a7       	std	Y+47, r24	; 0x2f
    20b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    20b8:	98 a9       	ldd	r25, Y+48	; 0x30
    20ba:	9c a7       	std	Y+44, r25	; 0x2c
    20bc:	8b a7       	std	Y+43, r24	; 0x2b
    20be:	8b a5       	ldd	r24, Y+43	; 0x2b
    20c0:	9c a5       	ldd	r25, Y+44	; 0x2c
    20c2:	01 97       	sbiw	r24, 0x01	; 1
    20c4:	f1 f7       	brne	.-4      	; 0x20c2 <LCD_displayCharacter+0x106>
    20c6:	9c a7       	std	Y+44, r25	; 0x2c
    20c8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20ca:	83 e0       	ldi	r24, 0x03	; 3
    20cc:	67 e0       	ldi	r22, 0x07	; 7
    20ce:	41 e0       	ldi	r20, 0x01	; 1
    20d0:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	a0 e8       	ldi	r26, 0x80	; 128
    20da:	bf e3       	ldi	r27, 0x3F	; 63
    20dc:	8f a3       	std	Y+39, r24	; 0x27
    20de:	98 a7       	std	Y+40, r25	; 0x28
    20e0:	a9 a7       	std	Y+41, r26	; 0x29
    20e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20e4:	6f a1       	ldd	r22, Y+39	; 0x27
    20e6:	78 a5       	ldd	r23, Y+40	; 0x28
    20e8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	4a e7       	ldi	r20, 0x7A	; 122
    20f2:	53 e4       	ldi	r21, 0x43	; 67
    20f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f8:	dc 01       	movw	r26, r24
    20fa:	cb 01       	movw	r24, r22
    20fc:	8b a3       	std	Y+35, r24	; 0x23
    20fe:	9c a3       	std	Y+36, r25	; 0x24
    2100:	ad a3       	std	Y+37, r26	; 0x25
    2102:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2104:	6b a1       	ldd	r22, Y+35	; 0x23
    2106:	7c a1       	ldd	r23, Y+36	; 0x24
    2108:	8d a1       	ldd	r24, Y+37	; 0x25
    210a:	9e a1       	ldd	r25, Y+38	; 0x26
    210c:	20 e0       	ldi	r18, 0x00	; 0
    210e:	30 e0       	ldi	r19, 0x00	; 0
    2110:	40 e8       	ldi	r20, 0x80	; 128
    2112:	5f e3       	ldi	r21, 0x3F	; 63
    2114:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2118:	88 23       	and	r24, r24
    211a:	2c f4       	brge	.+10     	; 0x2126 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	9a a3       	std	Y+34, r25	; 0x22
    2122:	89 a3       	std	Y+33, r24	; 0x21
    2124:	3f c0       	rjmp	.+126    	; 0x21a4 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2126:	6b a1       	ldd	r22, Y+35	; 0x23
    2128:	7c a1       	ldd	r23, Y+36	; 0x24
    212a:	8d a1       	ldd	r24, Y+37	; 0x25
    212c:	9e a1       	ldd	r25, Y+38	; 0x26
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	3f ef       	ldi	r19, 0xFF	; 255
    2132:	4f e7       	ldi	r20, 0x7F	; 127
    2134:	57 e4       	ldi	r21, 0x47	; 71
    2136:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    213a:	18 16       	cp	r1, r24
    213c:	4c f5       	brge	.+82     	; 0x2190 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    213e:	6f a1       	ldd	r22, Y+39	; 0x27
    2140:	78 a5       	ldd	r23, Y+40	; 0x28
    2142:	89 a5       	ldd	r24, Y+41	; 0x29
    2144:	9a a5       	ldd	r25, Y+42	; 0x2a
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e2       	ldi	r20, 0x20	; 32
    214c:	51 e4       	ldi	r21, 0x41	; 65
    214e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2152:	dc 01       	movw	r26, r24
    2154:	cb 01       	movw	r24, r22
    2156:	bc 01       	movw	r22, r24
    2158:	cd 01       	movw	r24, r26
    215a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    215e:	dc 01       	movw	r26, r24
    2160:	cb 01       	movw	r24, r22
    2162:	9a a3       	std	Y+34, r25	; 0x22
    2164:	89 a3       	std	Y+33, r24	; 0x21
    2166:	0f c0       	rjmp	.+30     	; 0x2186 <LCD_displayCharacter+0x1ca>
    2168:	89 e1       	ldi	r24, 0x19	; 25
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	98 a3       	std	Y+32, r25	; 0x20
    216e:	8f 8f       	std	Y+31, r24	; 0x1f
    2170:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2172:	98 a1       	ldd	r25, Y+32	; 0x20
    2174:	01 97       	sbiw	r24, 0x01	; 1
    2176:	f1 f7       	brne	.-4      	; 0x2174 <LCD_displayCharacter+0x1b8>
    2178:	98 a3       	std	Y+32, r25	; 0x20
    217a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    217c:	89 a1       	ldd	r24, Y+33	; 0x21
    217e:	9a a1       	ldd	r25, Y+34	; 0x22
    2180:	01 97       	sbiw	r24, 0x01	; 1
    2182:	9a a3       	std	Y+34, r25	; 0x22
    2184:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2186:	89 a1       	ldd	r24, Y+33	; 0x21
    2188:	9a a1       	ldd	r25, Y+34	; 0x22
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	69 f7       	brne	.-38     	; 0x2168 <LCD_displayCharacter+0x1ac>
    218e:	14 c0       	rjmp	.+40     	; 0x21b8 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2190:	6b a1       	ldd	r22, Y+35	; 0x23
    2192:	7c a1       	ldd	r23, Y+36	; 0x24
    2194:	8d a1       	ldd	r24, Y+37	; 0x25
    2196:	9e a1       	ldd	r25, Y+38	; 0x26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9a a3       	std	Y+34, r25	; 0x22
    21a2:	89 a3       	std	Y+33, r24	; 0x21
    21a4:	89 a1       	ldd	r24, Y+33	; 0x21
    21a6:	9a a1       	ldd	r25, Y+34	; 0x22
    21a8:	9e 8f       	std	Y+30, r25	; 0x1e
    21aa:	8d 8f       	std	Y+29, r24	; 0x1d
    21ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_displayCharacter+0x1f4>
    21b4:	9e 8f       	std	Y+30, r25	; 0x1e
    21b6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	69 ad       	ldd	r22, Y+57	; 0x39
    21bc:	0e 94 46 0c 	call	0x188c	; 0x188c <GPIO_writePort>
    21c0:	80 e0       	ldi	r24, 0x00	; 0
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	a0 e8       	ldi	r26, 0x80	; 128
    21c6:	bf e3       	ldi	r27, 0x3F	; 63
    21c8:	89 8f       	std	Y+25, r24	; 0x19
    21ca:	9a 8f       	std	Y+26, r25	; 0x1a
    21cc:	ab 8f       	std	Y+27, r26	; 0x1b
    21ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d0:	69 8d       	ldd	r22, Y+25	; 0x19
    21d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	4a e7       	ldi	r20, 0x7A	; 122
    21de:	53 e4       	ldi	r21, 0x43	; 67
    21e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e4:	dc 01       	movw	r26, r24
    21e6:	cb 01       	movw	r24, r22
    21e8:	8d 8b       	std	Y+21, r24	; 0x15
    21ea:	9e 8b       	std	Y+22, r25	; 0x16
    21ec:	af 8b       	std	Y+23, r26	; 0x17
    21ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21f0:	6d 89       	ldd	r22, Y+21	; 0x15
    21f2:	7e 89       	ldd	r23, Y+22	; 0x16
    21f4:	8f 89       	ldd	r24, Y+23	; 0x17
    21f6:	98 8d       	ldd	r25, Y+24	; 0x18
    21f8:	20 e0       	ldi	r18, 0x00	; 0
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	40 e8       	ldi	r20, 0x80	; 128
    21fe:	5f e3       	ldi	r21, 0x3F	; 63
    2200:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2204:	88 23       	and	r24, r24
    2206:	2c f4       	brge	.+10     	; 0x2212 <LCD_displayCharacter+0x256>
		__ticks = 1;
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	9c 8b       	std	Y+20, r25	; 0x14
    220e:	8b 8b       	std	Y+19, r24	; 0x13
    2210:	3f c0       	rjmp	.+126    	; 0x2290 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2212:	6d 89       	ldd	r22, Y+21	; 0x15
    2214:	7e 89       	ldd	r23, Y+22	; 0x16
    2216:	8f 89       	ldd	r24, Y+23	; 0x17
    2218:	98 8d       	ldd	r25, Y+24	; 0x18
    221a:	20 e0       	ldi	r18, 0x00	; 0
    221c:	3f ef       	ldi	r19, 0xFF	; 255
    221e:	4f e7       	ldi	r20, 0x7F	; 127
    2220:	57 e4       	ldi	r21, 0x47	; 71
    2222:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2226:	18 16       	cp	r1, r24
    2228:	4c f5       	brge	.+82     	; 0x227c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    222a:	69 8d       	ldd	r22, Y+25	; 0x19
    222c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    222e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2232:	20 e0       	ldi	r18, 0x00	; 0
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	40 e2       	ldi	r20, 0x20	; 32
    2238:	51 e4       	ldi	r21, 0x41	; 65
    223a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	bc 01       	movw	r22, r24
    2244:	cd 01       	movw	r24, r26
    2246:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    224a:	dc 01       	movw	r26, r24
    224c:	cb 01       	movw	r24, r22
    224e:	9c 8b       	std	Y+20, r25	; 0x14
    2250:	8b 8b       	std	Y+19, r24	; 0x13
    2252:	0f c0       	rjmp	.+30     	; 0x2272 <LCD_displayCharacter+0x2b6>
    2254:	89 e1       	ldi	r24, 0x19	; 25
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	9a 8b       	std	Y+18, r25	; 0x12
    225a:	89 8b       	std	Y+17, r24	; 0x11
    225c:	89 89       	ldd	r24, Y+17	; 0x11
    225e:	9a 89       	ldd	r25, Y+18	; 0x12
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	f1 f7       	brne	.-4      	; 0x2260 <LCD_displayCharacter+0x2a4>
    2264:	9a 8b       	std	Y+18, r25	; 0x12
    2266:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2268:	8b 89       	ldd	r24, Y+19	; 0x13
    226a:	9c 89       	ldd	r25, Y+20	; 0x14
    226c:	01 97       	sbiw	r24, 0x01	; 1
    226e:	9c 8b       	std	Y+20, r25	; 0x14
    2270:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2272:	8b 89       	ldd	r24, Y+19	; 0x13
    2274:	9c 89       	ldd	r25, Y+20	; 0x14
    2276:	00 97       	sbiw	r24, 0x00	; 0
    2278:	69 f7       	brne	.-38     	; 0x2254 <LCD_displayCharacter+0x298>
    227a:	14 c0       	rjmp	.+40     	; 0x22a4 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    227c:	6d 89       	ldd	r22, Y+21	; 0x15
    227e:	7e 89       	ldd	r23, Y+22	; 0x16
    2280:	8f 89       	ldd	r24, Y+23	; 0x17
    2282:	98 8d       	ldd	r25, Y+24	; 0x18
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9c 8b       	std	Y+20, r25	; 0x14
    228e:	8b 8b       	std	Y+19, r24	; 0x13
    2290:	8b 89       	ldd	r24, Y+19	; 0x13
    2292:	9c 89       	ldd	r25, Y+20	; 0x14
    2294:	98 8b       	std	Y+16, r25	; 0x10
    2296:	8f 87       	std	Y+15, r24	; 0x0f
    2298:	8f 85       	ldd	r24, Y+15	; 0x0f
    229a:	98 89       	ldd	r25, Y+16	; 0x10
    229c:	01 97       	sbiw	r24, 0x01	; 1
    229e:	f1 f7       	brne	.-4      	; 0x229c <LCD_displayCharacter+0x2e0>
    22a0:	98 8b       	std	Y+16, r25	; 0x10
    22a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22a4:	83 e0       	ldi	r24, 0x03	; 3
    22a6:	67 e0       	ldi	r22, 0x07	; 7
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <GPIO_writePin>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e8       	ldi	r26, 0x80	; 128
    22b4:	bf e3       	ldi	r27, 0x3F	; 63
    22b6:	8b 87       	std	Y+11, r24	; 0x0b
    22b8:	9c 87       	std	Y+12, r25	; 0x0c
    22ba:	ad 87       	std	Y+13, r26	; 0x0d
    22bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6b 85       	ldd	r22, Y+11	; 0x0b
    22c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a e7       	ldi	r20, 0x7A	; 122
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	8f 83       	std	Y+7, r24	; 0x07
    22d8:	98 87       	std	Y+8, r25	; 0x08
    22da:	a9 87       	std	Y+9, r26	; 0x09
    22dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22de:	6f 81       	ldd	r22, Y+7	; 0x07
    22e0:	78 85       	ldd	r23, Y+8	; 0x08
    22e2:	89 85       	ldd	r24, Y+9	; 0x09
    22e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_displayCharacter+0x344>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	9e 83       	std	Y+6, r25	; 0x06
    22fc:	8d 83       	std	Y+5, r24	; 0x05
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2300:	6f 81       	ldd	r22, Y+7	; 0x07
    2302:	78 85       	ldd	r23, Y+8	; 0x08
    2304:	89 85       	ldd	r24, Y+9	; 0x09
    2306:	9a 85       	ldd	r25, Y+10	; 0x0a
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6b 85       	ldd	r22, Y+11	; 0x0b
    231a:	7c 85       	ldd	r23, Y+12	; 0x0c
    231c:	8d 85       	ldd	r24, Y+13	; 0x0d
    231e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_displayCharacter+0x3a4>
    2342:	89 e1       	ldi	r24, 0x19	; 25
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9c 83       	std	Y+4, r25	; 0x04
    2348:	8b 83       	std	Y+3, r24	; 0x03
    234a:	8b 81       	ldd	r24, Y+3	; 0x03
    234c:	9c 81       	ldd	r25, Y+4	; 0x04
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_displayCharacter+0x392>
    2352:	9c 83       	std	Y+4, r25	; 0x04
    2354:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8d 81       	ldd	r24, Y+5	; 0x05
    2358:	9e 81       	ldd	r25, Y+6	; 0x06
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	9e 83       	std	Y+6, r25	; 0x06
    235e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8d 81       	ldd	r24, Y+5	; 0x05
    2362:	9e 81       	ldd	r25, Y+6	; 0x06
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_displayCharacter+0x386>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	6f 81       	ldd	r22, Y+7	; 0x07
    236c:	78 85       	ldd	r23, Y+8	; 0x08
    236e:	89 85       	ldd	r24, Y+9	; 0x09
    2370:	9a 85       	ldd	r25, Y+10	; 0x0a
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	9a 81       	ldd	r25, Y+2	; 0x02
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x3ce>
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2392:	e9 96       	adiw	r28, 0x39	; 57
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <LCD_displayString+0x6>
    23aa:	0f 92       	push	r0
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	9b 83       	std	Y+3, r25	; 0x03
    23b2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23b4:	19 82       	std	Y+1, r1	; 0x01
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23b8:	89 81       	ldd	r24, Y+1	; 0x01
    23ba:	28 2f       	mov	r18, r24
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	9b 81       	ldd	r25, Y+3	; 0x03
    23c2:	fc 01       	movw	r30, r24
    23c4:	e2 0f       	add	r30, r18
    23c6:	f3 1f       	adc	r31, r19
    23c8:	80 81       	ld	r24, Z
    23ca:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <LCD_displayCharacter>
		i++;
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	8f 5f       	subi	r24, 0xFF	; 255
    23d2:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	28 2f       	mov	r18, r24
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	9b 81       	ldd	r25, Y+3	; 0x03
    23de:	fc 01       	movw	r30, r24
    23e0:	e2 0f       	add	r30, r18
    23e2:	f3 1f       	adc	r31, r19
    23e4:	80 81       	ld	r24, Z
    23e6:	88 23       	and	r24, r24
    23e8:	39 f7       	brne	.-50     	; 0x23b8 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	0f 90       	pop	r0
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <LCD_moveCursor+0x6>
    23fc:	00 d0       	rcall	.+0      	; 0x23fe <LCD_moveCursor+0x8>
    23fe:	0f 92       	push	r0
    2400:	cd b7       	in	r28, 0x3d	; 61
    2402:	de b7       	in	r29, 0x3e	; 62
    2404:	8a 83       	std	Y+2, r24	; 0x02
    2406:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	28 2f       	mov	r18, r24
    240c:	30 e0       	ldi	r19, 0x00	; 0
    240e:	3d 83       	std	Y+5, r19	; 0x05
    2410:	2c 83       	std	Y+4, r18	; 0x04
    2412:	8c 81       	ldd	r24, Y+4	; 0x04
    2414:	9d 81       	ldd	r25, Y+5	; 0x05
    2416:	81 30       	cpi	r24, 0x01	; 1
    2418:	91 05       	cpc	r25, r1
    241a:	c1 f0       	breq	.+48     	; 0x244c <LCD_moveCursor+0x56>
    241c:	2c 81       	ldd	r18, Y+4	; 0x04
    241e:	3d 81       	ldd	r19, Y+5	; 0x05
    2420:	22 30       	cpi	r18, 0x02	; 2
    2422:	31 05       	cpc	r19, r1
    2424:	2c f4       	brge	.+10     	; 0x2430 <LCD_moveCursor+0x3a>
    2426:	8c 81       	ldd	r24, Y+4	; 0x04
    2428:	9d 81       	ldd	r25, Y+5	; 0x05
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	61 f0       	breq	.+24     	; 0x2446 <LCD_moveCursor+0x50>
    242e:	19 c0       	rjmp	.+50     	; 0x2462 <LCD_moveCursor+0x6c>
    2430:	2c 81       	ldd	r18, Y+4	; 0x04
    2432:	3d 81       	ldd	r19, Y+5	; 0x05
    2434:	22 30       	cpi	r18, 0x02	; 2
    2436:	31 05       	cpc	r19, r1
    2438:	69 f0       	breq	.+26     	; 0x2454 <LCD_moveCursor+0x5e>
    243a:	8c 81       	ldd	r24, Y+4	; 0x04
    243c:	9d 81       	ldd	r25, Y+5	; 0x05
    243e:	83 30       	cpi	r24, 0x03	; 3
    2440:	91 05       	cpc	r25, r1
    2442:	61 f0       	breq	.+24     	; 0x245c <LCD_moveCursor+0x66>
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	0b c0       	rjmp	.+22     	; 0x2462 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	80 5c       	subi	r24, 0xC0	; 192
    2450:	89 83       	std	Y+1, r24	; 0x01
    2452:	07 c0       	rjmp	.+14     	; 0x2462 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	80 5f       	subi	r24, 0xF0	; 240
    2458:	89 83       	std	Y+1, r24	; 0x01
    245a:	03 c0       	rjmp	.+6      	; 0x2462 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    245c:	8b 81       	ldd	r24, Y+3	; 0x03
    245e:	80 5b       	subi	r24, 0xB0	; 176
    2460:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	80 68       	ori	r24, 0x80	; 128
    2466:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_sendCommand>
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	08 95       	ret

0000247a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    247a:	df 93       	push	r29
    247c:	cf 93       	push	r28
    247e:	00 d0       	rcall	.+0      	; 0x2480 <LCD_displayStringRowColumn+0x6>
    2480:	00 d0       	rcall	.+0      	; 0x2482 <LCD_displayStringRowColumn+0x8>
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	89 83       	std	Y+1, r24	; 0x01
    2488:	6a 83       	std	Y+2, r22	; 0x02
    248a:	5c 83       	std	Y+4, r21	; 0x04
    248c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    248e:	89 81       	ldd	r24, Y+1	; 0x01
    2490:	6a 81       	ldd	r22, Y+2	; 0x02
    2492:	0e 94 fb 11 	call	0x23f6	; 0x23f6 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_displayString>
}
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	cf 91       	pop	r28
    24a8:	df 91       	pop	r29
    24aa:	08 95       	ret

000024ac <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24ac:	df 93       	push	r29
    24ae:	cf 93       	push	r28
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	62 97       	sbiw	r28, 0x12	; 18
    24b6:	0f b6       	in	r0, 0x3f	; 63
    24b8:	f8 94       	cli
    24ba:	de bf       	out	0x3e, r29	; 62
    24bc:	0f be       	out	0x3f, r0	; 63
    24be:	cd bf       	out	0x3d, r28	; 61
    24c0:	9a 8b       	std	Y+18, r25	; 0x12
    24c2:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    24c4:	89 89       	ldd	r24, Y+17	; 0x11
    24c6:	9a 89       	ldd	r25, Y+18	; 0x12
    24c8:	9e 01       	movw	r18, r28
    24ca:	2f 5f       	subi	r18, 0xFF	; 255
    24cc:	3f 4f       	sbci	r19, 0xFF	; 255
    24ce:	b9 01       	movw	r22, r18
    24d0:	4a e0       	ldi	r20, 0x0A	; 10
    24d2:	50 e0       	ldi	r21, 0x00	; 0
    24d4:	0e 94 dd 14 	call	0x29ba	; 0x29ba <itoa>
   LCD_displayString(buff); /* Display the string */
    24d8:	ce 01       	movw	r24, r28
    24da:	01 96       	adiw	r24, 0x01	; 1
    24dc:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <LCD_displayString>
}
    24e0:	62 96       	adiw	r28, 0x12	; 18
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	de bf       	out	0x3e, r29	; 62
    24e8:	0f be       	out	0x3f, r0	; 63
    24ea:	cd bf       	out	0x3d, r28	; 61
    24ec:	cf 91       	pop	r28
    24ee:	df 91       	pop	r29
    24f0:	08 95       	ret

000024f2 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    24f2:	df 93       	push	r29
    24f4:	cf 93       	push	r28
    24f6:	cd b7       	in	r28, 0x3d	; 61
    24f8:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <LCD_sendCommand>
}
    2500:	cf 91       	pop	r28
    2502:	df 91       	pop	r29
    2504:	08 95       	ret

00002506 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    2506:	1f 92       	push	r1
    2508:	0f 92       	push	r0
    250a:	0f b6       	in	r0, 0x3f	; 63
    250c:	0f 92       	push	r0
    250e:	11 24       	eor	r1, r1
    2510:	2f 93       	push	r18
    2512:	3f 93       	push	r19
    2514:	4f 93       	push	r20
    2516:	5f 93       	push	r21
    2518:	6f 93       	push	r22
    251a:	7f 93       	push	r23
    251c:	8f 93       	push	r24
    251e:	9f 93       	push	r25
    2520:	af 93       	push	r26
    2522:	bf 93       	push	r27
    2524:	ef 93       	push	r30
    2526:	ff 93       	push	r31
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2530:	80 91 f4 00 	lds	r24, 0x00F4
    2534:	90 91 f5 00 	lds	r25, 0x00F5
    2538:	00 97       	sbiw	r24, 0x00	; 0
    253a:	29 f0       	breq	.+10     	; 0x2546 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the time is over */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    253c:	e0 91 f4 00 	lds	r30, 0x00F4
    2540:	f0 91 f5 00 	lds	r31, 0x00F5
    2544:	09 95       	icall
	}
}
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	ff 91       	pop	r31
    254c:	ef 91       	pop	r30
    254e:	bf 91       	pop	r27
    2550:	af 91       	pop	r26
    2552:	9f 91       	pop	r25
    2554:	8f 91       	pop	r24
    2556:	7f 91       	pop	r23
    2558:	6f 91       	pop	r22
    255a:	5f 91       	pop	r21
    255c:	4f 91       	pop	r20
    255e:	3f 91       	pop	r19
    2560:	2f 91       	pop	r18
    2562:	0f 90       	pop	r0
    2564:	0f be       	out	0x3f, r0	; 63
    2566:	0f 90       	pop	r0
    2568:	1f 90       	pop	r1
    256a:	18 95       	reti

0000256c <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    256c:	1f 92       	push	r1
    256e:	0f 92       	push	r0
    2570:	0f b6       	in	r0, 0x3f	; 63
    2572:	0f 92       	push	r0
    2574:	11 24       	eor	r1, r1
    2576:	2f 93       	push	r18
    2578:	3f 93       	push	r19
    257a:	4f 93       	push	r20
    257c:	5f 93       	push	r21
    257e:	6f 93       	push	r22
    2580:	7f 93       	push	r23
    2582:	8f 93       	push	r24
    2584:	9f 93       	push	r25
    2586:	af 93       	push	r26
    2588:	bf 93       	push	r27
    258a:	ef 93       	push	r30
    258c:	ff 93       	push	r31
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2596:	80 91 f4 00 	lds	r24, 0x00F4
    259a:	90 91 f5 00 	lds	r25, 0x00F5
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	29 f0       	breq	.+10     	; 0x25ac <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the time is over */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25a2:	e0 91 f4 00 	lds	r30, 0x00F4
    25a6:	f0 91 f5 00 	lds	r31, 0x00F5
    25aa:	09 95       	icall
	}
}
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	ff 91       	pop	r31
    25b2:	ef 91       	pop	r30
    25b4:	bf 91       	pop	r27
    25b6:	af 91       	pop	r26
    25b8:	9f 91       	pop	r25
    25ba:	8f 91       	pop	r24
    25bc:	7f 91       	pop	r23
    25be:	6f 91       	pop	r22
    25c0:	5f 91       	pop	r21
    25c2:	4f 91       	pop	r20
    25c4:	3f 91       	pop	r19
    25c6:	2f 91       	pop	r18
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f 90       	pop	r0
    25ce:	1f 90       	pop	r1
    25d0:	18 95       	reti

000025d2 <Timer0_init>:
 * 	2. Set Timer initial value
 * 	3. Set the required prescaler.
 * 	4. Enable Timer0 Overflow Interrupt
 */
void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    25d2:	df 93       	push	r29
    25d4:	cf 93       	push	r28
    25d6:	00 d0       	rcall	.+0      	; 0x25d8 <Timer0_init+0x6>
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62
    25dc:	9a 83       	std	Y+2, r25	; 0x02
    25de:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = (Config_Ptr->InitialValue); /* Set Initial Value */
    25e0:	a2 e5       	ldi	r26, 0x52	; 82
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	e9 81       	ldd	r30, Y+1	; 0x01
    25e6:	fa 81       	ldd	r31, Y+2	; 0x02
    25e8:	81 81       	ldd	r24, Z+1	; 0x01
    25ea:	8c 93       	st	X, r24
	if ((Config_Ptr->Mode) == NORMAL)
    25ec:	e9 81       	ldd	r30, Y+1	; 0x01
    25ee:	fa 81       	ldd	r31, Y+2	; 0x02
    25f0:	80 81       	ld	r24, Z
    25f2:	88 23       	and	r24, r24
    25f4:	61 f4       	brne	.+24     	; 0x260e <Timer0_init+0x3c>
	{
		TIMSK |= (1<<TOIE0); /* Enable Timer0 Overflow Interrupt */
    25f6:	a9 e5       	ldi	r26, 0x59	; 89
    25f8:	b0 e0       	ldi	r27, 0x00	; 0
    25fa:	e9 e5       	ldi	r30, 0x59	; 89
    25fc:	f0 e0       	ldi	r31, 0x00	; 0
    25fe:	80 81       	ld	r24, Z
    2600:	81 60       	ori	r24, 0x01	; 1
    2602:	8c 93       	st	X, r24
		/* Configure the timer control register
		 * 1. Non PWM mode FOC0=1
		 * 2. Normal Mode WGM01=0 & WGM00=0
		 * 3. Normal Mode COM00=0 & COM01=0
		 */
		TCCR0 = (1<<FOC0);
    2604:	e3 e5       	ldi	r30, 0x53	; 83
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 e8       	ldi	r24, 0x80	; 128
    260a:	80 83       	st	Z, r24
    260c:	16 c0       	rjmp	.+44     	; 0x263a <Timer0_init+0x68>
	}
	else if ((Config_Ptr->Mode) == COMPARE)
    260e:	e9 81       	ldd	r30, Y+1	; 0x01
    2610:	fa 81       	ldd	r31, Y+2	; 0x02
    2612:	80 81       	ld	r24, Z
    2614:	81 30       	cpi	r24, 0x01	; 1
    2616:	89 f4       	brne	.+34     	; 0x263a <Timer0_init+0x68>
	{
		OCR0  = (Config_Ptr->CompValue); /* Set Compare Value */
    2618:	ac e5       	ldi	r26, 0x5C	; 92
    261a:	b0 e0       	ldi	r27, 0x00	; 0
    261c:	e9 81       	ldd	r30, Y+1	; 0x01
    261e:	fa 81       	ldd	r31, Y+2	; 0x02
    2620:	82 81       	ldd	r24, Z+2	; 0x02
    2622:	8c 93       	st	X, r24
		TIMSK |= (1<<OCIE0); /* Enable Timer0 Compare Interrupt */
    2624:	a9 e5       	ldi	r26, 0x59	; 89
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e9 e5       	ldi	r30, 0x59	; 89
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	82 60       	ori	r24, 0x02	; 2
    2630:	8c 93       	st	X, r24
		/* Configure timer0 control register
		 * 1. Non PWM mode FOC0=1
		 * 2. CTC Mode WGM01=1 & WGM00=0
		 * 3. No need for OC0 so COM00=0 & COM01=0
		 */
		TCCR0 = (1<<FOC0) | (1<<WGM01);
    2632:	e3 e5       	ldi	r30, 0x53	; 83
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	88 e8       	ldi	r24, 0x88	; 136
    2638:	80 83       	st	Z, r24
	}
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->prescaler) & 0x07);
    263a:	a3 e5       	ldi	r26, 0x53	; 83
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e3 e5       	ldi	r30, 0x53	; 83
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	98 2f       	mov	r25, r24
    2646:	98 7f       	andi	r25, 0xF8	; 248
    2648:	e9 81       	ldd	r30, Y+1	; 0x01
    264a:	fa 81       	ldd	r31, Y+2	; 0x02
    264c:	83 81       	ldd	r24, Z+3	; 0x03
    264e:	87 70       	andi	r24, 0x07	; 7
    2650:	89 2b       	or	r24, r25
    2652:	8c 93       	st	X, r24
}
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	cf 91       	pop	r28
    265a:	df 91       	pop	r29
    265c:	08 95       	ret

0000265e <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    265e:	df 93       	push	r29
    2660:	cf 93       	push	r28
    2662:	00 d0       	rcall	.+0      	; 0x2664 <Timer0_setCallBack+0x6>
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	9a 83       	std	Y+2, r25	; 0x02
    266a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
		g_callBackPtr = a_ptr;
    266c:	89 81       	ldd	r24, Y+1	; 0x01
    266e:	9a 81       	ldd	r25, Y+2	; 0x02
    2670:	90 93 f5 00 	sts	0x00F5, r25
    2674:	80 93 f4 00 	sts	0x00F4, r24
}
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	cf 91       	pop	r28
    267e:	df 91       	pop	r29
    2680:	08 95       	ret

00002682 <Timer0_DeInit>:

/*
 * Description: Function to disable the Timer0 to stop the Timer0 Driver
 */
void Timer0_DeInit(void)
{
    2682:	df 93       	push	r29
    2684:	cf 93       	push	r28
    2686:	cd b7       	in	r28, 0x3d	; 61
    2688:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer0 Registers */
		TCCR0 = 0;
    268a:	e3 e5       	ldi	r30, 0x53	; 83
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	10 82       	st	Z, r1
		TCNT0 = 0;
    2690:	e2 e5       	ldi	r30, 0x52	; 82
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	10 82       	st	Z, r1
		OCR0  = 0;
    2696:	ec e5       	ldi	r30, 0x5C	; 92
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	10 82       	st	Z, r1
		TIMSK &= ~(1<<TOIE0);
    269c:	a9 e5       	ldi	r26, 0x59	; 89
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	e9 e5       	ldi	r30, 0x59	; 89
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	8e 7f       	andi	r24, 0xFE	; 254
    26a8:	8c 93       	st	X, r24
		TIMSK &= ~(1<<OCIE0);
    26aa:	a9 e5       	ldi	r26, 0x59	; 89
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e9 e5       	ldi	r30, 0x59	; 89
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	80 81       	ld	r24, Z
    26b4:	8d 7f       	andi	r24, 0xFD	; 253
    26b6:	8c 93       	st	X, r24
}
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <UART_init+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <UART_init+0x8>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	9c 83       	std	Y+4, r25	; 0x04
    26cc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    26ce:	1a 82       	std	Y+2, r1	; 0x02
    26d0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    26d2:	eb e2       	ldi	r30, 0x2B	; 43
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	82 e0       	ldi	r24, 0x02	; 2
    26d8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 1 For 9-bit data mode and UCSZ2 = 0 otherwise
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    26da:	ea e2       	ldi	r30, 0x2A	; 42
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	88 e1       	ldi	r24, 0x18	; 24
    26e0:	80 83       	st	Z, r24
	if ((Config_Ptr->CharacterSize) == _9_BIT)
    26e2:	eb 81       	ldd	r30, Y+3	; 0x03
    26e4:	fc 81       	ldd	r31, Y+4	; 0x04
    26e6:	80 81       	ld	r24, Z
    26e8:	87 30       	cpi	r24, 0x07	; 7
    26ea:	39 f4       	brne	.+14     	; 0x26fa <UART_init+0x3c>
	{
		UCSRB |= (1<<UCSZ2);
    26ec:	aa e2       	ldi	r26, 0x2A	; 42
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	ea e2       	ldi	r30, 0x2A	; 42
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	84 60       	ori	r24, 0x04	; 4
    26f8:	8c 93       	st	X, r24
	 * UPM1:0  set parity as selected from the structure
	 * USBS    set stop bit as selected from the structure
	 * UCSZ1:0 set character size as selected from the structure
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1); 
    26fa:	e0 e4       	ldi	r30, 0x40	; 64
    26fc:	f0 e0       	ldi	r31, 0x00	; 0
    26fe:	86 e8       	ldi	r24, 0x86	; 134
    2700:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode) << UPM0);
    2702:	a0 e4       	ldi	r26, 0x40	; 64
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e0 e4       	ldi	r30, 0x40	; 64
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	28 2f       	mov	r18, r24
    270e:	2f 7c       	andi	r18, 0xCF	; 207
    2710:	eb 81       	ldd	r30, Y+3	; 0x03
    2712:	fc 81       	ldd	r31, Y+4	; 0x04
    2714:	81 81       	ldd	r24, Z+1	; 0x01
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	82 95       	swap	r24
    271c:	92 95       	swap	r25
    271e:	90 7f       	andi	r25, 0xF0	; 240
    2720:	98 27       	eor	r25, r24
    2722:	80 7f       	andi	r24, 0xF0	; 240
    2724:	98 27       	eor	r25, r24
    2726:	82 2b       	or	r24, r18
    2728:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->StopBitSelect) << USBS);
    272a:	a0 e4       	ldi	r26, 0x40	; 64
    272c:	b0 e0       	ldi	r27, 0x00	; 0
    272e:	e0 e4       	ldi	r30, 0x40	; 64
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	28 2f       	mov	r18, r24
    2736:	27 7f       	andi	r18, 0xF7	; 247
    2738:	eb 81       	ldd	r30, Y+3	; 0x03
    273a:	fc 81       	ldd	r31, Y+4	; 0x04
    273c:	82 81       	ldd	r24, Z+2	; 0x02
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	82 2b       	or	r24, r18
    2750:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->CharacterSize) & 0x03) << USBS);
    2752:	a0 e4       	ldi	r26, 0x40	; 64
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e0 e4       	ldi	r30, 0x40	; 64
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	28 2f       	mov	r18, r24
    275e:	29 7f       	andi	r18, 0xF9	; 249
    2760:	eb 81       	ldd	r30, Y+3	; 0x03
    2762:	fc 81       	ldd	r31, Y+4	; 0x04
    2764:	80 81       	ld	r24, Z
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	83 70       	andi	r24, 0x03	; 3
    276c:	90 70       	andi	r25, 0x00	; 0
    276e:	88 0f       	add	r24, r24
    2770:	99 1f       	adc	r25, r25
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	82 2b       	or	r24, r18
    277c:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    277e:	eb 81       	ldd	r30, Y+3	; 0x03
    2780:	fc 81       	ldd	r31, Y+4	; 0x04
    2782:	83 81       	ldd	r24, Z+3	; 0x03
    2784:	94 81       	ldd	r25, Z+4	; 0x04
    2786:	a5 81       	ldd	r26, Z+5	; 0x05
    2788:	b6 81       	ldd	r27, Z+6	; 0x06
    278a:	88 0f       	add	r24, r24
    278c:	99 1f       	adc	r25, r25
    278e:	aa 1f       	adc	r26, r26
    2790:	bb 1f       	adc	r27, r27
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	aa 1f       	adc	r26, r26
    2798:	bb 1f       	adc	r27, r27
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	aa 1f       	adc	r26, r26
    27a0:	bb 1f       	adc	r27, r27
    27a2:	9c 01       	movw	r18, r24
    27a4:	ad 01       	movw	r20, r26
    27a6:	80 e4       	ldi	r24, 0x40	; 64
    27a8:	92 e4       	ldi	r25, 0x42	; 66
    27aa:	af e0       	ldi	r26, 0x0F	; 15
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 84 14 	call	0x2908	; 0x2908 <__udivmodsi4>
    27b6:	da 01       	movw	r26, r20
    27b8:	c9 01       	movw	r24, r18
    27ba:	01 97       	sbiw	r24, 0x01	; 1
    27bc:	9a 83       	std	Y+2, r25	; 0x02
    27be:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    27c0:	e0 e4       	ldi	r30, 0x40	; 64
    27c2:	f0 e0       	ldi	r31, 0x00	; 0
    27c4:	89 81       	ldd	r24, Y+1	; 0x01
    27c6:	9a 81       	ldd	r25, Y+2	; 0x02
    27c8:	89 2f       	mov	r24, r25
    27ca:	99 27       	eor	r25, r25
    27cc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    27ce:	e9 e2       	ldi	r30, 0x29	; 41
    27d0:	f0 e0       	ldi	r31, 0x00	; 0
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	80 83       	st	Z, r24
}
    27d6:	0f 90       	pop	r0
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	0f 92       	push	r0
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27f0:	eb e2       	ldi	r30, 0x2B	; 43
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	80 72       	andi	r24, 0x20	; 32
    27fc:	90 70       	andi	r25, 0x00	; 0
    27fe:	00 97       	sbiw	r24, 0x00	; 0
    2800:	b9 f3       	breq	.-18     	; 0x27f0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2802:	ec e2       	ldi	r30, 0x2C	; 44
    2804:	f0 e0       	ldi	r31, 0x00	; 0
    2806:	89 81       	ldd	r24, Y+1	; 0x01
    2808:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    280a:	0f 90       	pop	r0
    280c:	cf 91       	pop	r28
    280e:	df 91       	pop	r29
    2810:	08 95       	ret

00002812 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2812:	df 93       	push	r29
    2814:	cf 93       	push	r28
    2816:	cd b7       	in	r28, 0x3d	; 61
    2818:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    281a:	eb e2       	ldi	r30, 0x2B	; 43
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	88 23       	and	r24, r24
    2822:	dc f7       	brge	.-10     	; 0x281a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2824:	ec e2       	ldi	r30, 0x2C	; 44
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	80 81       	ld	r24, Z
}
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	00 d0       	rcall	.+0      	; 0x2836 <UART_sendString+0x6>
    2836:	0f 92       	push	r0
    2838:	cd b7       	in	r28, 0x3d	; 61
    283a:	de b7       	in	r29, 0x3e	; 62
    283c:	9b 83       	std	Y+3, r25	; 0x03
    283e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2840:	19 82       	std	Y+1, r1	; 0x01
    2842:	0e c0       	rjmp	.+28     	; 0x2860 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	9b 81       	ldd	r25, Y+3	; 0x03
    284e:	fc 01       	movw	r30, r24
    2850:	e2 0f       	add	r30, r18
    2852:	f3 1f       	adc	r31, r19
    2854:	80 81       	ld	r24, Z
    2856:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <UART_sendByte>
		i++;
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	8a 81       	ldd	r24, Y+2	; 0x02
    2868:	9b 81       	ldd	r25, Y+3	; 0x03
    286a:	fc 01       	movw	r30, r24
    286c:	e2 0f       	add	r30, r18
    286e:	f3 1f       	adc	r31, r19
    2870:	80 81       	ld	r24, Z
    2872:	88 23       	and	r24, r24
    2874:	39 f7       	brne	.-50     	; 0x2844 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2876:	0f 90       	pop	r0
    2878:	0f 90       	pop	r0
    287a:	0f 90       	pop	r0
    287c:	cf 91       	pop	r28
    287e:	df 91       	pop	r29
    2880:	08 95       	ret

00002882 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2882:	0f 93       	push	r16
    2884:	1f 93       	push	r17
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	00 d0       	rcall	.+0      	; 0x288c <UART_receiveString+0xa>
    288c:	0f 92       	push	r0
    288e:	cd b7       	in	r28, 0x3d	; 61
    2890:	de b7       	in	r29, 0x3e	; 62
    2892:	9b 83       	std	Y+3, r25	; 0x03
    2894:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2896:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2898:	89 81       	ldd	r24, Y+1	; 0x01
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	9b 81       	ldd	r25, Y+3	; 0x03
    28a2:	8c 01       	movw	r16, r24
    28a4:	02 0f       	add	r16, r18
    28a6:	13 1f       	adc	r17, r19
    28a8:	0e 94 09 14 	call	0x2812	; 0x2812 <UART_recieveByte>
    28ac:	f8 01       	movw	r30, r16
    28ae:	80 83       	st	Z, r24
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	8f 5f       	subi	r24, 0xFF	; 255
    28b6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	28 2f       	mov	r18, r24
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	9b 81       	ldd	r25, Y+3	; 0x03
    28c2:	8c 01       	movw	r16, r24
    28c4:	02 0f       	add	r16, r18
    28c6:	13 1f       	adc	r17, r19
    28c8:	0e 94 09 14 	call	0x2812	; 0x2812 <UART_recieveByte>
    28cc:	f8 01       	movw	r30, r16
    28ce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	28 2f       	mov	r18, r24
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	fc 01       	movw	r30, r24
    28dc:	e2 0f       	add	r30, r18
    28de:	f3 1f       	adc	r31, r19
    28e0:	80 81       	ld	r24, Z
    28e2:	83 32       	cpi	r24, 0x23	; 35
    28e4:	31 f7       	brne	.-52     	; 0x28b2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	9b 81       	ldd	r25, Y+3	; 0x03
    28f0:	fc 01       	movw	r30, r24
    28f2:	e2 0f       	add	r30, r18
    28f4:	f3 1f       	adc	r31, r19
    28f6:	10 82       	st	Z, r1
}
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	cf 91       	pop	r28
    2900:	df 91       	pop	r29
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <__udivmodsi4>:
    2908:	a1 e2       	ldi	r26, 0x21	; 33
    290a:	1a 2e       	mov	r1, r26
    290c:	aa 1b       	sub	r26, r26
    290e:	bb 1b       	sub	r27, r27
    2910:	fd 01       	movw	r30, r26
    2912:	0d c0       	rjmp	.+26     	; 0x292e <__udivmodsi4_ep>

00002914 <__udivmodsi4_loop>:
    2914:	aa 1f       	adc	r26, r26
    2916:	bb 1f       	adc	r27, r27
    2918:	ee 1f       	adc	r30, r30
    291a:	ff 1f       	adc	r31, r31
    291c:	a2 17       	cp	r26, r18
    291e:	b3 07       	cpc	r27, r19
    2920:	e4 07       	cpc	r30, r20
    2922:	f5 07       	cpc	r31, r21
    2924:	20 f0       	brcs	.+8      	; 0x292e <__udivmodsi4_ep>
    2926:	a2 1b       	sub	r26, r18
    2928:	b3 0b       	sbc	r27, r19
    292a:	e4 0b       	sbc	r30, r20
    292c:	f5 0b       	sbc	r31, r21

0000292e <__udivmodsi4_ep>:
    292e:	66 1f       	adc	r22, r22
    2930:	77 1f       	adc	r23, r23
    2932:	88 1f       	adc	r24, r24
    2934:	99 1f       	adc	r25, r25
    2936:	1a 94       	dec	r1
    2938:	69 f7       	brne	.-38     	; 0x2914 <__udivmodsi4_loop>
    293a:	60 95       	com	r22
    293c:	70 95       	com	r23
    293e:	80 95       	com	r24
    2940:	90 95       	com	r25
    2942:	9b 01       	movw	r18, r22
    2944:	ac 01       	movw	r20, r24
    2946:	bd 01       	movw	r22, r26
    2948:	cf 01       	movw	r24, r30
    294a:	08 95       	ret

0000294c <__prologue_saves__>:
    294c:	2f 92       	push	r2
    294e:	3f 92       	push	r3
    2950:	4f 92       	push	r4
    2952:	5f 92       	push	r5
    2954:	6f 92       	push	r6
    2956:	7f 92       	push	r7
    2958:	8f 92       	push	r8
    295a:	9f 92       	push	r9
    295c:	af 92       	push	r10
    295e:	bf 92       	push	r11
    2960:	cf 92       	push	r12
    2962:	df 92       	push	r13
    2964:	ef 92       	push	r14
    2966:	ff 92       	push	r15
    2968:	0f 93       	push	r16
    296a:	1f 93       	push	r17
    296c:	cf 93       	push	r28
    296e:	df 93       	push	r29
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	ca 1b       	sub	r28, r26
    2976:	db 0b       	sbc	r29, r27
    2978:	0f b6       	in	r0, 0x3f	; 63
    297a:	f8 94       	cli
    297c:	de bf       	out	0x3e, r29	; 62
    297e:	0f be       	out	0x3f, r0	; 63
    2980:	cd bf       	out	0x3d, r28	; 61
    2982:	09 94       	ijmp

00002984 <__epilogue_restores__>:
    2984:	2a 88       	ldd	r2, Y+18	; 0x12
    2986:	39 88       	ldd	r3, Y+17	; 0x11
    2988:	48 88       	ldd	r4, Y+16	; 0x10
    298a:	5f 84       	ldd	r5, Y+15	; 0x0f
    298c:	6e 84       	ldd	r6, Y+14	; 0x0e
    298e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2990:	8c 84       	ldd	r8, Y+12	; 0x0c
    2992:	9b 84       	ldd	r9, Y+11	; 0x0b
    2994:	aa 84       	ldd	r10, Y+10	; 0x0a
    2996:	b9 84       	ldd	r11, Y+9	; 0x09
    2998:	c8 84       	ldd	r12, Y+8	; 0x08
    299a:	df 80       	ldd	r13, Y+7	; 0x07
    299c:	ee 80       	ldd	r14, Y+6	; 0x06
    299e:	fd 80       	ldd	r15, Y+5	; 0x05
    29a0:	0c 81       	ldd	r16, Y+4	; 0x04
    29a2:	1b 81       	ldd	r17, Y+3	; 0x03
    29a4:	aa 81       	ldd	r26, Y+2	; 0x02
    29a6:	b9 81       	ldd	r27, Y+1	; 0x01
    29a8:	ce 0f       	add	r28, r30
    29aa:	d1 1d       	adc	r29, r1
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	ed 01       	movw	r28, r26
    29b8:	08 95       	ret

000029ba <itoa>:
    29ba:	fb 01       	movw	r30, r22
    29bc:	9f 01       	movw	r18, r30
    29be:	e8 94       	clt
    29c0:	42 30       	cpi	r20, 0x02	; 2
    29c2:	c4 f0       	brlt	.+48     	; 0x29f4 <itoa+0x3a>
    29c4:	45 32       	cpi	r20, 0x25	; 37
    29c6:	b4 f4       	brge	.+44     	; 0x29f4 <itoa+0x3a>
    29c8:	4a 30       	cpi	r20, 0x0A	; 10
    29ca:	29 f4       	brne	.+10     	; 0x29d6 <itoa+0x1c>
    29cc:	97 fb       	bst	r25, 7
    29ce:	1e f4       	brtc	.+6      	; 0x29d6 <itoa+0x1c>
    29d0:	90 95       	com	r25
    29d2:	81 95       	neg	r24
    29d4:	9f 4f       	sbci	r25, 0xFF	; 255
    29d6:	64 2f       	mov	r22, r20
    29d8:	77 27       	eor	r23, r23
    29da:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <__udivmodhi4>
    29de:	80 5d       	subi	r24, 0xD0	; 208
    29e0:	8a 33       	cpi	r24, 0x3A	; 58
    29e2:	0c f0       	brlt	.+2      	; 0x29e6 <itoa+0x2c>
    29e4:	89 5d       	subi	r24, 0xD9	; 217
    29e6:	81 93       	st	Z+, r24
    29e8:	cb 01       	movw	r24, r22
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	a1 f7       	brne	.-24     	; 0x29d6 <itoa+0x1c>
    29ee:	16 f4       	brtc	.+4      	; 0x29f4 <itoa+0x3a>
    29f0:	5d e2       	ldi	r21, 0x2D	; 45
    29f2:	51 93       	st	Z+, r21
    29f4:	10 82       	st	Z, r1
    29f6:	c9 01       	movw	r24, r18
    29f8:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <strrev>

000029fc <strrev>:
    29fc:	dc 01       	movw	r26, r24
    29fe:	fc 01       	movw	r30, r24
    2a00:	67 2f       	mov	r22, r23
    2a02:	71 91       	ld	r23, Z+
    2a04:	77 23       	and	r23, r23
    2a06:	e1 f7       	brne	.-8      	; 0x2a00 <strrev+0x4>
    2a08:	32 97       	sbiw	r30, 0x02	; 2
    2a0a:	04 c0       	rjmp	.+8      	; 0x2a14 <strrev+0x18>
    2a0c:	7c 91       	ld	r23, X
    2a0e:	6d 93       	st	X+, r22
    2a10:	70 83       	st	Z, r23
    2a12:	62 91       	ld	r22, -Z
    2a14:	ae 17       	cp	r26, r30
    2a16:	bf 07       	cpc	r27, r31
    2a18:	c8 f3       	brcs	.-14     	; 0x2a0c <strrev+0x10>
    2a1a:	08 95       	ret

00002a1c <__udivmodhi4>:
    2a1c:	aa 1b       	sub	r26, r26
    2a1e:	bb 1b       	sub	r27, r27
    2a20:	51 e1       	ldi	r21, 0x11	; 17
    2a22:	07 c0       	rjmp	.+14     	; 0x2a32 <__udivmodhi4_ep>

00002a24 <__udivmodhi4_loop>:
    2a24:	aa 1f       	adc	r26, r26
    2a26:	bb 1f       	adc	r27, r27
    2a28:	a6 17       	cp	r26, r22
    2a2a:	b7 07       	cpc	r27, r23
    2a2c:	10 f0       	brcs	.+4      	; 0x2a32 <__udivmodhi4_ep>
    2a2e:	a6 1b       	sub	r26, r22
    2a30:	b7 0b       	sbc	r27, r23

00002a32 <__udivmodhi4_ep>:
    2a32:	88 1f       	adc	r24, r24
    2a34:	99 1f       	adc	r25, r25
    2a36:	5a 95       	dec	r21
    2a38:	a9 f7       	brne	.-22     	; 0x2a24 <__udivmodhi4_loop>
    2a3a:	80 95       	com	r24
    2a3c:	90 95       	com	r25
    2a3e:	bc 01       	movw	r22, r24
    2a40:	cd 01       	movw	r24, r26
    2a42:	08 95       	ret

00002a44 <_exit>:
    2a44:	f8 94       	cli

00002a46 <__stop_program>:
    2a46:	ff cf       	rjmp	.-2      	; 0x2a46 <__stop_program>
